      *? Program        : WSPOACK003
      *?
      *? Description    : This program to Generate Acknowledgement XML
      *?                  for Order Create
      *? Created By     : S.Uthayadurga
      *?
      *? Date           : 17 Oct 2017
      //--------------------------------------------------------------------
      *? Special Notes  : ** Generate Acknowledgement XML for Brokers
      *?                : ** Write XML data into IFS stream file
      *?                : ** Send Acknowledgement through FTP/POSTXML based on
      *?                     Broker Default File
      *?                : ** Send Email Acknowledgement for Eason
      *
      *? Called Program : WSPOSTXML  - WS - POST XML to Client Site
      *?                  WSCOVAL002 - WS - XML File Validation and Order Change
      *?                  WSCOACK003 - WS - Acknowledgment Process for Change Order
      *?                  WSRTVMSG   - WS - Retrieve message from Message file
      *?                  WSSNDFTPC  - WS - SEND Inv & Ack xml files to Brokers using FTP
      *?                  WSEMLACKB  - WS - Email Order Ack. to Bill to Customer
      *?                  QCMDEXC    - Pgm To Call CL command in Rpg
      *?                  INVAVLSTS - Inventory Availability Status
      *
      *? Response       : Status for Brokers (Web Service Call)
      //--------------------------------------------------------------------
      *?                :---------------:
      *?                : Modifications :
      *?                :---------------:
      * ------  --------   ----------   ------------------------------------
      * MOD#    MOD Date   Programmer   Description
      * ------  --------   ----------   ------------------------------------
      *?Changes in 2018
      *         02/13/18   WJB          Change codes passed for 'LineItemStatus'
      *         02/14/18   WJB          Change OverAllProcessStatus Flag hardcod
      *?Phase II
      * SUD01   03/22/18   S.Uthaya     Added logic to check XML change
      *                                 Order file for Pending Request
      * SUD02   03/27/18   S.Uthaya     ItemSr Changes for Partial Order
      * SUD03   03/28/18   S.Uthaya     Special Character replacement
      * VV01    04/30/18   Vimala V     Added New brokers for Phase II Changes
      * SUD04   05/04/18   S.Uthaya     Phase II Changes
      * SUD05   07/31/18   S.Uthaya     Added FTP Process for Brokers
      * SUD06   07/31/18   S.Uthaya     Changes to Write Duplicate Item/Size
      *                                 for Order Coming from Xml in WS CO file
      * VV02    08/09/18   Vimala V     Ship Via Cross Reference from XREFSVIO file
      * SUD07   08/21/18   S.Uthaya     Removed KP_proc tag for Eason
      *         08/23/18   S.Uthaya     Removed Periods from File name for Eason
      *         08/28/18   S.Uthaya     Changed LineItemStatus Values for Eason
      * SUD08   10/04/18   S.Uthaya     Added Email Acknowledgement for Eason
      * SUD09   11/12/18   S.Uthaya     For Not Authorized Item, Send Error Msg
      *                                 into LineItemComment
      * VV03    11/29/18   Vimala V     Include logic to send line for Items
      *                                 deleted manually (not 'D' status record)
      *                                 in FIORDR but found in XML files
      * VV04    12/06/18   Vimala V     Populate Error Description returned by
      *                                 INVAVLSTS program in field KP LineItemComment
      *                                 or any error/msg generated by KubePak
      * VV05    12/14/18   Vimala V     Write Error Description returned by
      *                                 INVAVLSTS program to file FIORDRB2B1 and send
      *                                 the lastest comment based on timestamp
      *                                 from FIORDRB2B1 file in KP LineItemComment
      *?Changes in 2019
      * VV06    01/30/19   Vimala V     Do not call INVAVLSTS and write comment in
      *                                 FIORDRB2B1 - Take latest record to send in Ack
      * VV07    02/13/19   Vimala V     If Orderline from FIORDR not found in xml, send
      *                                 message instead of Item Description in LineItemComment
      *                                 Change CPY cmd to reduce the size of the file in IFS
      //--------------------------------------------------------------------
      *?                :----------------------:
      *?                : Header Specification :
      *?                :----------------------:
      *
        Ctl-Opt DftActGrp(*NO) Option(*NoDebugIO)
           ActGrp ('HTTP') BndDir('QC2LE');
      //--------------------------------------------------------------------
      *?                :--------------------:
      *?                : File Specification :
      *?                :--------------------:
      *
      *?File: WS - Xml Order Create Header Logical File
      *?Key : From Org ID:Customer PO:Header Seq No
        Dcl-F WSPOHDRL1  Disk(*Ext) Keyed Usage(*Update:*Output);
      *
      *?File: WS - Xml Order Create Detail Logical File
      *?Key : From Org ID:Customer PO:Header Seq No:Order No:Order Line No
        Dcl-F WSPODTLL1  Disk(*Ext) Keyed Usage(*Update:*Output);
      *
      *?File: Order Header Record
      *?Key : Order Number
        Dcl-F FHORDR     Disk(*Ext) Keyed Usage(*Input);
      *
      *?File: WS - Broker Defaults and Control Logical File
      *?Key : Broker Number:Broker Variable
        Dcl-F FBROKDFTL0 Disk(*Ext) Keyed Usage(*Input);
      *
      *?File: Size Code Master File
      *?Key : Size Code
        Dcl-F FMSIZE     Disk(*Ext) Keyed Usage(*Input);
      *
      *?File: Customer Master File
      *?Key : Customer Code
        Dcl-F FMCUST     Disk(*Ext) Keyed Usage(*Input);
      *
      *?File: Item Cross Reference  Logical File
      *?Key : Provided Name:Provided Type:Local Key
        Dcl-F XREFINVTL1 Disk(*Ext) Keyed Usage(*Input);
SUD01 *
  |     Dcl-F XREFINVTL0 Disk(*Ext) Keyed Usage(*Input) Rename(XRECINVT:Rec1)
  |                                            Prefix(I);
  |   *?File: WS - XML Change Order Header Logical File
  |   *?Key : From Org ID:Customer PO:Header Seq No
  |     Dcl-F WSCOHDRL1  Disk(*Ext) Keyed Usage(*Output:*Update);
  |   *
  |   *?File: WS - Xml Order Detail Logical File
  |   *?Key : From Org ID:Customer PO:Header Seq No:Detail Seq No
  |     Dcl-F WSCODTLL1  Disk(*Ext) Keyed Usage(*Update);
SUD01 *
SUD02 *?File: Order Detail Record
  |   *?Key : Status:Order Number:Order Seq No
  |     Dcl-F FIORDRL15  Disk(*Ext) Keyed Usage(*Input);
  |   *
  |   *?File: Order Detail Partial Item Record
  |   *?Key : Order Number:List Code
  |     Dcl-F FIORDRPART Disk(*Ext) Keyed Usage(*Input) Prefix(H);
  |   *
  |   *?File: Xml Order Error Exception File
  |   *?Key : OrderNO:OrderLine:Item:Item Size
SUD02   Dcl-F WSERREXPL3 Disk(*Ext) Keyed Usage(*Update:*Output);
      *
SUD06 *?File: WS - XML Order Change Control Logical File
  |   *?Key : From Org Id:Broker Order Id:Order #:Item:Size:BrkItem:BrkSize
SUD06   Dcl-F WSORCHCL2  Disk(*Ext) Keyed Usage(*Input:*Update);
      *
VV02  *?File: Ship Via Cross Reference for Outbound
  |   *?Key : ProvidedbyName:Type:Local Key
VV02    Dcl-F XREFSVIOL0 Disk(*Ext) Keyed Usage(*Input);
      *
VV05  *?File: Order Detail B2B Coments
  |   *?Key : Order Number:Order Line:TimeStamp(D)
VV05    Dcl-F FIORDRB2B1 Disk(*Ext) Keyed Usage(*Input:*Output);
      //--------------------------------------------------------------------
      *?                :--------------------:
      *?                : Data Specification :
      *?                :--------------------:
      *
      *?Procedure Interface Declaration : *Entry
        Dcl-Pi WSPOACK003;
           PFromOrgId Like(PHFRORID);
           PCustPO    Like(PHBRKORID);
           PSeqNo     Like(PHSEQNO);
           PBrkAck    Char(1000000) Options(*Varsize);
        End-Pi;
      *
SUD01 *?Procedure Prototype Declaration : CO Validation Program
  |     Dcl-Pr WSCOVAL002 Extpgm;
  |        PFromOrgId Like(PFromOrgId);
  |        PCustPO    Like(PCustPO);
  |        WkSeqno    Like(WkSeqno);
  |        WkFlag     Like(WkFlag);
  |     End-Pr;
  |   *
  |   *?Procedure Prototype Declaration : CO Acknowledgement Program
  |     Dcl-Pr WSCOACK003 Extpgm;
  |        PFromOrgId Like(PFromOrgID);
  |        PCustPO    Like(PCustPO);
  |        WkSeqno    Like(WkSeqno);
  |        PBrkAck    Char(1000000) Options(*Varsize);
  |     End-Pr;
SUD01 *
      *?Procedure Prototype Declaration : To POST XML to Client Site
        Dcl-Pr WSPOSTXML  Extpgm;
           PBrkAck    Char(1000000) Options(*Varsize);
           PFromOrgId Char(30)      Options(*Varsize);
           PFlag      Char(1);
           HttpStatus Int(10:0);
        End-Pr;
      *
SUD05 *?Procedure Prototype Declaration : Send FTP Program
  |     Dcl-Pr WSSNDFTPC  Extpgm;
  |        PPgmName  Char(10);
  |        PLogName  Char(10);
SUD05   End-Pr;
      *
SUD08 *?Procedure Prototype Declaration : Send Email Acknowledgement
  |     Dcl-Pr WSEMLACKB  Extpgm;
  |        POrder#  Packed(6);
SUD08   End-Pr;
      *
SUD09 *?Procedure Prototype Declaration : Check on the Inventory availability status
  |     Dcl-Pr INVAVLSTS Extpgm;                   // Rpg Program
  |        Item          Char(12);                 // Item
  |        Size          Char(3);                  // Size
  |        ThisDate      Date(*Usa);               // Ready Date
  |        ThisType      Char(10);                 // Plug-View-Type
  |        ErrorNumber   Zoned(1:0);               // Error
  |        ErrDesc       Char(10);                 // Error Description
SUD09   End-Pr;
      *
      *?Procedure Prototype Declaration : Pgm to Call Command
        Dcl-Pr QCMDEXC Extpgm;
           Cmd Char(2000)   Const Options(*Varsize);
           Len Packed(15:5) Const;
        End-Pr;
      *
      *?Procedure Prototype Declaration : Call CL program to Retreive MSG
        Dcl-Pr RtvErrMsg Extpgm('WSRTVMSG');            // CL Program
           WkMsgId  Char(7);                            // Msg Id
           WkMsgF   Char(10);                           // Msg File
           WKMsg    Char(132);                          // Msg
           WkDta    Char(10);                           // Msg Data
        End-Pr;
      *
      *?Procedure Prototype Declaration : AddXml Part
        Dcl-Pr AddToXml;
           Tagname    Char(50)    Value;
           Tagval     Char(300)   Value;
           Info       Char(10)    Value;
        End-Pr;
      *
      *?Program Status Data Structure   :
        Dcl-Ds Pgmstatus PSDS;
           Job     Char(10) Pos(244);
           User    Char(10) Pos(254);
           Rundate Zoned(6) Pos(276);
           Runtime Zoned(6) Pos(282);
           Pgm     Char(10) Pos(334);
        End-Ds;
      *
      *?Global Variable Declaration     :
        Dcl-S Xml        Char(1000000) Inz;
        Dcl-S Cmd        Char(2000)    Inz;
        Dcl-S XmlIfs     Char(300)     Inz;
        Dcl-S Info       Char(10)      Inz;
SUD09   Dcl-S ThisType   Char(10)      Inz;           // Plug-View-Type
  |     Dcl-S ErrDesc    Char(40)      Inz;           // Error Description
  |     Dcl-S Error      Zoned(1:0)    Inz;           // Error
SUD09   Dcl-S RqToday    Date(*Usa)    Inz;           // Requested ShipDate
        Dcl-S HttpStatus Int(10:0);
      *
      *?Work Variable Declaration       :
SUD01   Dcl-S WkLineItemNo Packed(10)  Inz;
  |     Dcl-S WkOrder      Packed(6)   Inz;
  |     Dcl-S WkSeqNo      Packed(9)   Inz;
SUD01   Dcl-S WkOrdLin     Packed(3)   Inz;
        Dcl-S WkOQty       Zoned(11)   Inz;
SUD02   Dcl-S WkLin1       Zoned(4:0)  Inz;
  |     Dcl-S WkOrdQty     Zoned(11:2) Inz;
  |     Dcl-S WkOILIST     Zoned(3)    Inz;
  |     Dcl-S WkOISEQ#     Zoned(3)    Inz;
SUD02   Dcl-S WkOIDTRQ     Zoned(6)    Inz;
        Dcl-S WkDate       Date(*ISO)  Inz;
SUD02   Dcl-S WkMsg        Char(132)   Inz;           // Used for Msg File
        Dcl-S WKDtTm       Char(19)    Inz;
        Dcl-S WkPath       Char(75)    Inz;
        Dcl-S WkFile       Char(75)    Inz;
        Dcl-S WkItem       Char(15)    Inz;
        Dcl-S WkRqdt       Char(10)    Inz;
        Dcl-S WkBroker     Char(20)    Inz;
SUD01   Dcl-S WkBrkItem    Char(18)    Inz;
  |     Dcl-S WkItem1      Char(12)    Inz;
  |     Dcl-S WkFrmOrgId   Char(30)    Inz;
SUD02   Dcl-S WkMsgf       Char(10)    Inz;           // Used for Msg File
  |     Dcl-S WkOIDES1     Char(30)    Inz;
SUD02   Dcl-S WkDta        Char(10)    Inz;           // Used for Msg File
SUD07   Dcl-S WkTmSt       Char(26)    Inz;
VV05    Dcl-S WkLICmt      Char(50)    Inz;
  |     Dcl-S WkOIITEM     Char(12)    Inz;
SUD01   Dcl-S WkFlag       Char(1)     Inz;
  |     Dcl-S WkReject     Char(4)     Inz;
SUD06   Dcl-S WkSize       Char(3)     Inz;
SUD02   Dcl-S WkLine       Char(4)     Inz;
  |     Dcl-S WkOIUUOM     Char(2)     Inz;
  |     Dcl-S WkOISIZE     Char(3)     Inz;
  |     Dcl-S WkOIITYP     Char(1)     Inz;
  |     Dcl-S WkMsgId      Char(7)     Inz;           // Used for Msg File
SUD05   Dcl-S WkFtp        Char(1)     Inz;
      *
      *?Parameter Variable Declaration  :
SUD08   Dcl-S POrder#    Packed(6) Inz;
SUD05   Dcl-S PPgmName   Char(10)  Inz;
SUD05   Dcl-S PLogName   Char(10)  Inz;
        Dcl-S PFlag      Char(1)   Inz;
      *
      *?Rejection Codes Declaration     :
        Dcl-S RejectionCode_Cancel  Char(4) Inz;
        Dcl-S RejectionCode_Confirm Char(4) Inz;
        Dcl-S RejectionCode_NewLine Char(4) Inz;
VV01    Dcl-S RejectionCode_Change  Char(4) Inz;
SUD04   Dcl-S RejectionCode_CancelK Char(4) Inz;
      //--------------------------------------------------------------------
      *?                :------------------:
      *?                : Calculation Spec :
      *?                :------------------:
      *
      *?Main Line :

      *?   // Initialize Program
           Exsr InzPgm;

      *?   // End Program
           Exsr EndPgm;

      //--------------------------------------------------------------------
      *?                :-----------------------:
      *?                : Initialise Subroutine :
      *?                :-----------------------:
      *
        Begsr InzPgm;

      *?   // Clear XML
           Clear PBrkAck;

      *?   // Get Date and Time
           WkDtTm = %Char(%Date) + 'T' + %Char(%Time());

VV07  *?   // Create IFSXML temp file in QTEMP
  |        Exec SQL Create Or Replace Table QTEMP.IFSXML (IFSXML VARCHAR(300));
VV07       Exec SQL Delete From Qtemp.IFSXML;

      *?   // Excute Process
           Exsr Process;

SUD05 *?   // Excute PostXml
SUD05      Exsr PostXml;

        Endsr;
SUD05 //--------------------------------------------------------------------
  |   *?                :--------------------:
  |   *?                : PostXml Subroutine :
  |   *?                :--------------------:
  |   *
  |     Begsr PostXml;
  |
  |   *?   // Post XML
  |        If PBrkAck <> *Blanks;
  |
  |   *?      // Use FTP for Specified Brokers
  |           WkFtp = '0';
  |           Chain (WkBroker : 'USEFTP' ) FBROKDFTL0;
  |           If %Found;
  |              WkFtp = %Trim(DFVARVAL);
  |           Endif;
  |
  |   *?      // Use Webservice
  |           If WkFtp = '0';
  |              PFlag = 'A';
  |              WSPOSTXML(PBrkAck:PFromOrgId:PFlag:HttpStatus);
  |              PBrkAck = 'Order ' + %Char(OHORD#) + ' Created and '   +
  |                        'Acknowledgement sent successfully for PO: ' +
  |                        PHBRKORID;
  |           Endif;
  |        Endif;
  |
SUD04 *?   // Create stream file
SUD07      Exsr CreateIfsSr;
SUD04
  |   *?   // Only for FTP Process
  |        If WkFtp = '1';
  |           Chain (WkBroker : 'IFSACKFTP' ) FBROKDFTL0;
  |           If %Found;
  |              WkPath = %Trim(DFVARVAL);
  |           Endif;
  |
VV07          Cmd = 'CPYTOIMPF FROMFILE(IFSXML) STMFCODPAG(1208)'
  |               + ' TOSTMF(''' + %Trim(WkPath) + %Trim(WkFile) + ''')'
  |               + ' MBROPT(*REPLACE) RCDDLM(*CRLF) DTAFMT(*DLM)'
VV07              + ' STRDLM(*NONE) RMVBLANK(*TRAILING)';
  |           Exsr CallCmd;
  |
  |   *?      // Send Acknowledgement FTP programs based on Brokers
  |           If WkBroker = '3953';                     // Eason
  |              PPgmName = 'WSACKEHFTP';
  |              PLogName = 'WSACKEHLOG';
  |           Elseif WkBroker = '9251';                 // Vaughans
  |              PPgmName = 'WSACKVNFTP';
  |              PLogName = 'WSACKVNLOG';
  |           Elseif WkBroker = '1947';                 // McHutchison
  |              PPgmName = 'WSACKMCFTP';
  |              PLogName = 'WSACKMCLOG';
  |           Endif;
  |           WSSNDFTPC(PPgmName:PLogName);
  |
  |   *?      // Remove Link
  |           Cmd = 'RMVLNK OBJLNK(''' + %Trim(WkPath) + %Trim(Wkfile) + ''')';
  |           Exsr CallCmd;
  |
  |        Endif;
  |
  |   *?   // Clear Flat File
  |        Cmd = 'CLRPFM FILE(QTEMP/IFSXML)';
  |        Exsr CallCmd;
SUD05
SUD08 *?   // Send Email Acknowledgement for Eason
  |        If PFromOrgId = 'Eason';
  |           WSEMLACKB(OHORD#);
  |        Endif;
SUD08
SUD01 *?   // Check Change Order XML file for the Broker ID
  |   *?   // If it is there with the Flag "X" , Process the Change Orders
  |        If OHORD# <> *Zeros;
  |           WkOrder = OHORD#;
  |           Exsr ChgOrdSr;
SUD01      Endif;
SUD05
SUD05   Endsr;
SUD07 //--------------------------------------------------------------------
  |   *?                :------------------------:
  |   *?                : CreateIfsSr Subroutine :
  |   *?                :------------------------:
  |   *
  |   *?Logic : Create IFS file name based on Broker
  |   *
  |     Begsr CreateIfsSr;
  |
  |   *?   // Get IFS Path
  |        Chain ('IFS' : 'IFSPATH' ) FBROKDFTL0;
  |        If %Found;
  |           WkPath = %Trim(DFVARVAL);
  |        Endif;
  |
  |   *?   // Create stream file Name based on Broker
  |        If PFromOrgId <> 'Eason';
  |           WkFile = 'PO-' + %Trim(PHBRKORID) + '_ORD#-' + %Char(OHORD#)
  |                       + '_'  + %Char(%Timestamp()) + '.xml';
  |        Else;
  |           WkTmSt = %Char(%Timestamp());
  |           WkTmSt = %ScanRpl('.' : '_' : WkTmSt);
  |           WkFile = 'PO-' + %Trim(PHBRKORID) + '_ORD#-' + %Char(OHORD#)
  |                       + '_'  + %Trim(WkTmSt) + '.xml';
  |        Endif;
  |
SUD07 *?   // Create stream file
VV07       Cmd = 'CPYTOIMPF FROMFILE(IFSXML) STMFCODPAG(1208)'
  |            + ' TOSTMF(''' + %Trim(WkPath) + %Trim(WkFile) + ''')'
  |            + ' MBROPT(*REPLACE) RCDDLM(*CRLF) DTAFMT(*DLM)'
VV07           + ' STRDLM(*NONE) RMVBLANK(*TRAILING)';
SUD07      Exsr CallCmd;
  |
  |     Endsr;
SUD07 //--------------------------------------------------------------------
      *?                :-------------------:
      *?                : Endpgm Subroutine :
      *?                :-------------------:
      *
        Begsr EndPgm;

      *?   // Return
           *InLr = *On;
           Return;

        Endsr;
      //--------------------------------------------------------------------
      *?                :--------------------:
      *?                : Process Subroutine :
      *?                :--------------------:
      *
        Begsr Process;

      *?   // Check Record Exists with Flag "C" and Process
           Chain (PFromOrgId:PCustPo:PSeqNo) WSPOHDRL1;
           If %Found;

      *?      // Start Tag
              AddToXml('BrokerAcknowledgement' : *Blanks : 'Starttag');

      *?      // XML Body
              Exsr IdentificationSR;
              Exsr OrderHeaderSR;
              Exsr OrderDetailSR;

      *?      // Update Process Flag Processed with Audit Stamp
              PHFLAG = 'P';
              Exsr WSHdrAudit;
              Update WSPOHDRR %Fields(PHFLAG:PHUPDDAT:PHUPDTIM
                                      :PHUPDUSR:PHUPDJOB:PHUPDPGM);

      *?      // End Tag
              AddToXml('BrokerAcknowledgement' : *Blanks : 'Endtag');

      *?      // Return Xml
              PBrkack = Xml;

           Endif;

        Endsr;
      //--------------------------------------------------------------------
      *?                :-----------------------------:
      *?                : IdentificationSR Subroutine :
      *?                :-----------------------------:
      *
        Begsr IdentificationSR;

      *?   // Move values into Identification Part
           AddToXml('Identification' : *Blanks : 'Opentag');
           AddToXml('MessageProtocol_ID' : 'BrokerAcknowledgement':'Attribute');

      *?   // Get Broker Number Parameter File
           Chain ('1000' : PFromOrgID) FBrokDftL0;
           If %Found;
              WkBroker = %Trim(DFVARVAL);
           Endif;

      *?   // Get Rejection Code from Parameter File
           RejectionCode_Cancel   =
              RejectionCode(WkBroker :'RejectionCode_Cancel');
           RejectionCode_Confirm  =
              RejectionCode(WkBroker :'RejectionCode_Confirm');
           RejectionCode_NewLine  =
              RejectionCode(WkBroker :'RejectionCode_NewLine');
VV01       RejectionCode_Change   =
 |            RejectionCode(WkBroker :'RejectionCode_Change');
 |         RejectionCode_CancelK  =
VV01          RejectionCode(WkBroker :'RejectionCode_CancelK');

      *?   // Move values into FromOrgId and SenderOrgId from Parameter File
           Chain (WkBroker:'FromOrgId') FBrokDftL0;
           If %Found;
              AddToXml('FromOrg_ID' : %Trim(DFVARVAL): 'Attribute');
              AddToXml('SenderOrg_ID': %Trim(DFVARVAL): 'Attribute');
           Endif;

      *?   // Move values into ToOrgId from Parameter File
           Chain (WkBroker : 'ToOrgId') FBrokDftL0;
           If %Found;
              AddToXml('ToOrg_ID' : %Trim(DFVARVAL): 'Attribute');
           Endif;

           AddToXml('Date' : WkDtTm : 'Closetag');          // Close Tag

        Endsr;
      //--------------------------------------------------------------------
      *?                :--------------------------:
      *?                : OrderHeaderSR Subroutine :
      *?                :--------------------------:
      *
        Begsr OrderHeaderSR;

      *?   // Move values into OrderHeader Part
           AddToXml('OrderHeader' : *Blanks : 'Opentag');

      *?   // Move Values from FHORDR
           Chain PHORDNO FHORDR;
           If %Found;
              AddToXml('AcknowledgementType' : OHSTAT : 'Attribute');
              AddToXml('VendorOrderID' : %Char(OHORD#) : 'Attribute');
           Endif;

      *?   // Move Values only for Ball
           If PHFRORID = 'Ball Seed';
              AddToXml('AirportCode' : PHAIRCDE : 'Attribute');
              AddToXml('BrokerCreatedTime' : %Char(PHBRKCRTM) : 'Attribute');
              AddToXml('BrokerUpdatedTime' : %Char(PHBRKUPTM) : 'Attribute');
              AddToXml('BrokerUpdatedDate' : %Char(PHBRKUPDT) : 'Attribute');
              AddToXml('BrokerUpdatedBy' : PHBRKUPBY : 'Attribute');
              AddToXml('RejectionStatus' : *Blanks : 'Attribute');
              AddToXml('HeaderComments' : PHHDRCMT : 'Attribute');
              AddToXml('CarrierNumber' : PHCARRNO : 'Attribute');
              AddToXml('CustomerReference' : *Blanks : 'Attribute');
              AddToXml('CommittedInventoryCode' : PHCMINCD : 'Attribute');
           Endif;

SUD05 *?   // Move Values only for Ball Seed/Eason
  |        If PHFRORID = 'Ball Seed' Or PHFRORID = 'Eason';
  |           AddToXml('ChangeOrderBatchNumber' : %Char(PHCHORNO): 'Attribute');
SUD05      Endif;

      *?   // Move Values only for Gloeckner
SUD04      If PHFRORID = 'Gloeckner';
VV01          AddToXml('BrokerRevision' : %Char(PHBRKRVN) : 'Attribute');
 |            AddToXml('RootingStation' : PHRTGSTN : 'Attribute');
 |            AddToXml('TagExchange' : PHEXCHNG :'Attribute');
 |            AddToXml('SalesRepName' : PHSALNAM : 'Attribute');
VV01       Endif;

VV02  *?   // Get Ship Method from XREFSVIO file
 |         Chain (PHFRORID :'Customer' : OHSHPC) XREFSVIOL0;
 |         If %Found;
 |            AddToXml('ShipMethod' : XRFORKEY : 'Attribute');
 |            If PHFRORID = 'Ball Seed';
 |               AddToXml('ShippingMethodDesc' : XRDESC : 'Attribute');
 |            Endif;
VV02       Endif;

      *?   // Common Tags
           AddToXml('CustomerPONumber' : PHCUSTPO : 'Attribute');
           AddToXml('BackOrderOK' : PHBKOROK : 'Attribute');
           AddToXml('OverAllProcessStatus' : 'M' : 'Attribute');   // WJB Hardco
           AddToXml('RequestedShipDate' : %Char(PHRQSHDT) : 'Attribute');
           AddToXml('BrokerCreatedDate' : %Char(PHBRKCRDT) : 'Attribute');
           AddToXml('VendorNumber' : PHVENDNO : 'Attribute');
           AddToXml('BrokerOrderID' : PHBRKORID : 'Attribute');
           AddToXml('FreightPaymentMethod' : PHFREMTH : 'Attribute');
           AddToXml('ShippingInstructions' : PHSHPINS : 'Attribute');
           AddToXml('SubstitutionOK' : PHSUBSOK : 'Close');        // Close Tag

           Exsr ShipToSR;
           Exsr SoldToSR;

           AddToXml('OrderHeader' : *Blanks : 'Endtag');

        Endsr;
      //--------------------------------------------------------------------
      *?                :-------------------:
      *?                : SoldTo Subroutine :
      *?                :-------------------:
      *
        Begsr SoldToSR;

      *?   // Check Record in Order Header File
           Chain PHORDNO FHORDR;
           If %Found;

      *?      // Move values from FHORDR
              AddToXml('SoldTo' : *Blanks : 'Opentag');
              AddToXml('SoldToName' : OHSLD1 : 'Attribute');
              AddToXml('SoldToAddress1' : OHSLD2 : 'Attribute');
              AddToXml('SoldToAddress2' : OHSLD3 : 'Attribute');
              AddToXml('SoldToState' : OHSLST : 'Attribute');
              AddToXml('SoldToCity' : OHSLCT : 'Attribute');
              AddToXml('SoldToZip' : OHSLZP : 'Attribute');
           Endif;

      *?   // Move values from FMCUST
           Chain OHCUST FMCUST;
           If %Found;
              AddToXml('SoldToCountry' : CMCOUN : 'Attribute');
              AddToXml('SoldToPhone' : %Char(CMPHON) : 'Attribute');
           Endif;

      *?   // Move values from WSPOHDRPF
           If PHFRORID = 'Ball Seed';
              AddToXml('BrokerSoldToNumber' : PHSLDNUM : 'Attribute');
           Endif;

           AddToXml('SoldToFax' : PHSLDFAX : 'Attribute');
           AddToXml('SoldToEmail' : PHSLDEML : 'Closetag'); // Close Tag

        Endsr;
      //--------------------------------------------------------------------
      *?                :-------------------:
      *?                : ShipTo Subroutine :
      *?                :-------------------:
      *
        Begsr ShipToSR;

      *?   // Move values from WSPOHDRPF
           AddToXml('ShipTo' : *Blanks : 'Opentag');

           If PHFRORID = 'Ball Seed';
              AddToXml('ShipToNonStandardAddress' : PHSHPNSAD : 'Attribute');
           Endif;
           AddToXml('ShipToContactName': PHSHPCON : 'Attribute');
           AddToXml('ShipToName' : PHSHPNAM : 'Attribute');
           AddToXml('BrokerShipToNumber' : PHSHPNUM : 'Attribute');
           AddToXml('ShipToAddress1' : PHSHPAD1 : 'Attribute');
           AddToXml('ShipToAddress2' : PHSHPAD2 : 'Attribute');
           AddToXml('ShipToState' : PHSHPSTE : 'Attribute');
           AddToXml('ShipToCity' : PHSHPCTY : 'Attribute');
           AddToXml('ShipToCountry ' : PHSHPCNTY : 'Attribute');
           AddToXml('ShipToZip' : PHSHPZIP : 'Attribute');
           AddToXml('ShipToFax' : PHSHPFAX : 'Attribute');
           AddToXml('ShipToPhone' : PHSHPPHN : 'Attribute');
           AddToXml('ShipToEmail' : PHSHPEML : 'Closetag');    // Close Tag

        Endsr;
      //--------------------------------------------------------------------
      *?                :--------------------------:
      *?                : OrderDetailSR Subroutine :
      *?                :--------------------------:
      *
        Begsr OrderDetailSR;

      *?   // Move values into Detail tags
           AddToXml('OrderDetails' : *Blanks : 'Starttag');

      *?   // Execute Item Part
           Exsr ItemSR;
           Exsr UnknownItemSR;
VV03       Exsr DeletedItemSR;

           AddToXml('OrderDetails' : *Blanks : 'Endtag');

        Endsr;
SUD02 //--------------------------------------------------------------------
  |   *?                :-------------------:
  |   *?                : ItemSR Subroutine :
  |   *?                :-------------------:
  |   *
  |     Begsr ItemSR;
  |
  |   *?   // Check Record Exists with Flag "C" and Process
  |   *?   // Check Order Detail to get all records that were entered manually
  |        Setll PHORDNO FIORDRL15;
  |        ReadE PHORDNO FIORDRL15;
  |        Dow Not %Eof;
  |           If OIITYP <> 'C';
  |
  |   *?         // Accmulate quantity for manually adjusted lines
  |   *?         // Write XML if OILIST changes
  |              If WkLine <> OILIST and WkLine <> *Blanks;
  |                 Exsr WrtItemSR;
  |                 WkOrdQty = *Zeros;
  |              Endif;
  |
  |   *?         // Move order line fields to work fields
  |              Exsr MoveFields;
  |              Chain (OIORD#:OISEQ#) FIORDRPART;
  |              If %Found;
  |                 WkOrdQty = WkOrdQty + ((OIQORD * HOIPCTF) / 100);
  |              Else;
  |                 WkOrdQty = WkOrdQty + OIQORD;
  |              Endif;
  |           Endif;
  |           WkLine = OILIST;
  |           ReadE PHORDNO FIORDRL15;
  |        Enddo;
  |
  |   *?   // Write Last read record
  |        If WkOIITYP = *Blanks;
  |           Exsr WrtItemSR;
  |        Endif;
  |
  |     Endsr;
  |   //--------------------------------------------------------------------
  |   *?                :-----------------------:
  |   *?                : MoveFields Subroutine :
  |   *?                :-----------------------:
  |   *
  |     Begsr MoveFields;
  |
  |   *?   // Move the Current record values to work variables
  |        WkOISEQ# = OISEQ#;
  |        If OILIST <> *Blanks;
  |           WkOILIST = %Int(OILIST);
  |        Endif;
  |        WkOIDTRQ = OIDTRQ;
  |        WkOIUUOM = OIUUOM;
  |        WkOIITEM = OIITEM;
  |        WkOISIZE = OISIZE;
  |        WkOIDES1 = OIDES1;
  |        WkOIITYP = OIITYP;
  |
  |     Endsr;
  |   //--------------------------------------------------------------------
  |   *?                :----------------------:
  |   *?                : WrtItemSR Subroutine :
  |   *?                :----------------------:
  |   *
  |     Begsr WrtItemSR;
  |
  |   *?   // Move values from XML file
SUD02      AddToXml('Item': *Blanks : 'Opentag');
SUD07      If PFromOrgId <> 'Eason';
  |           AddToXml('KP_proc' : 'WSPOACK003' : 'Attribute');
  |        Endif;
SUD07
SUD02 *?   // Convert quantity to Broker Quantity
  |        WkOQty = *Zeros;
  |        Chain WkOISIZE FMSIZE;
  |        If %Found and SZSTAT = 'A';
  |           WkOQty = WkOrdQty * SZSALE;
  |        Else;
  |           WkOQty = WkOrdQty;
  |        Endif;
  |
  |        If WkOQty = *Zeros;
  |           AddToXml('ConfirmedQty' : '0' : 'Attribute');
  |        Else;
  |           AddToXml('ConfirmedQty' : %Char(WkOQty) : 'Attribute');
  |        Endif;
  |
  |        IF WkOIDTRQ < OHDTRQ;
  |           WkDate = %Date(OHDTRQ:*mdy);
  |           WkRqDt = %Char(WkDate);
  |           AddToXml('ScheduledShipDate': WkRqDt:'Attribute');
  |        Else;
  |           WkDate = %Date(WkOIDTRQ:*mdy);
  |           WkRqDt = %Char(WkDate);
  |           AddToXml('ScheduledShipDate': WkRqDt :'Attribute');
  |        Endif;
  |
  |   *?   // Check record exists in XML File
  |        WkLin1 = %Int(WkLine);
  |        Chain (PFromOrgID:PHBRKORID:PHSEQNO:PHORDNO:WkLin1) WSPODTLL1;
  |        If %Found;
  |           If PDFLAG = 'C' Or PDFLAG = 'P';
  |
  |   *?         // Move values from Xml File
  |              AddToXml('BrokerLineItemNumber' : %Char(PDBRKLNE):'Attribute');
  |              AddToXml('BrokerMaterialNumber' : PDBRKMAT : 'Attribute');
  |              AddToXml('CommittedInventoryPONumber' : PDCOMINV :'Attribute');
SUD02            AddToXml('MaterialDescription' : PDVENDSC : 'Attribute');

VV05  *?         // Send latest comment from file FIORDRB2B1 in Ack for order/line
  |              WkLICmt = *Blanks;
  |              Setll (PDORDNO:PDORDLIN) FIORDRB2B1;
  |              Reade (PDORDNO:PDORDLIN) FIORDRB2B1;
  |              If %Equal;
  |                 PDKPITMCM = B2BCMNT;
  |                 WkLICmt   = B2BCMNT;
  |              Endif;
  |
  |   *?         // If comment found send, else blanks
VV05             AddToXml('LineItemComment' : WkLICmt : 'Attribute');
SUD02
  |              If PDORDQTY = *Zeros;
  |                 AddToXml('OrderdQty' : '0' : 'Attribute');
  |              Else;
  |                 AddToXml('OrderdQty' : %Char(PDORDQTY) : 'Attribute');
  |              Endif;
  |
  |              If PHFRORID = 'Ball Seed';
  |                 AddToXml('LineItemPrice' : %Char(PDLNITMPR) : 'Attribute');
  |                 AddToXml('UnitofMeasure' : WkOIUUOM : 'Attribute');
  |                 AddToXml('SubbedBrokerMaterial' : *Blanks : 'Attribute');
  |              Endif;
  |
SUD02            If WkOQty = *Zeros;
SUD04               If PHFRORID = 'Gloeckner';
  |                    AddToXml('RejectionCode':RejectionCode_CancelK                      //WJB01
  |                                           :'Attribute');                               //WJB01
  |                    AddToXml('LineItemStatus' : 'C'    : 'Attribute');                  //WJB01
  |                 Else;
  |                    AddToXml('RejectionCode':RejectionCode_Cancel                      //WJB01
  |                                            :'Attribute');                             //WJB01
  |                    AddToXml('LineItemStatus' : 'C'    : 'Attribute');                 //WJB01
SUD04               Endif;
SUD02            Else;

      *?            // If Gloeckner send the correct Line status code
SUD04               If PHFRORID = 'Gloeckner';
VV01                   If PDORDQTY <> WKOQty and WKOQty <> 0 and PDORDQTY <> 0;
 |                        AddToXml('LineItemStatus' : 'M' : 'Attribute');
 |                        AddToXml('RejectionCode':RejectionCode_Change:
 |                                                   'Attribute');
 |                     Else;
 |                        If PDORDQTY = WKOQty;
 |                           AddToXml('LineItemStatus' : ' ' : 'Attribute');
 |                           AddToXml('RejectionCode':RejectionCode_Confirm :
 |                                                   'Attribute');
 |                        Endif;
VV01                   Endif;
SUD02               Else;
SUD07                  If PHFRORID = 'Eason';
  |                       AddToXml('LineItemStatus' : ' ' : 'Attribute');                 //WJB01
  |                    Else;
  |                       AddToXml('LineItemStatus' : 'M' : 'Attribute');                 //WJB01
SUD07                  Endif;
SUD02                  AddToXml('RejectionCode':RejectionCode_Confirm:                    //WJB01
SUD02                                                        'Attribute');                //WJB01
VV01                Endif;
SUD02            Endif;

      *?         // Only for Gloeckner
SUD04            If PHFRORID = 'Gloeckner';
VV01                AddToXml('VendorLineItemNumber' : %Char(PDVENLNE) :
 |                                                   'Attribute');
 |                  AddToXml('TagRatio' : PDTAGRAT  :'Attribute');
 |                  AddToXml('TagRatioDescription' : PDTAGRATD:'Attribute');
 |                  AddToXml('TagRatioValue' : %Char(PDTAGRATV):'Attribute');
VV01             Endif;
SUD02            AddToXml('VendorMaterialNumber' : PDVENMAT : 'Closetag');
  |
  |   *?         // Update Flag in XML Order Detail File ("C" - Created)
  |              If PDFlag = 'C';
  |                 PDFlag = 'P';
SUD02            Endif;
SUD02            Exsr WSDtlAudit;

VV04  *?         // Update Error Description if any in KP Line Item Comment
  |              Update WSPODTLR %Fields(PDFLAG:PDUPDDAT:PDUPDTIM:
VV04                                 PDUPDUSR:PDUPDJOB:PDUPDPGM:PDKPITMCM);
SUD02         Endif;
  |
  |   *?   // If record not found in XML Detail File
  |        Else;
  |
SUD02 *?      // Call CL program to Get Error Msg
VV07          Monitor;
  |              WkMsgf  = 'WSMSGF';
  |              WkDta   = *Blanks;
  |              WkMsgId = 'WS00095';
  |              RtvErrMsg(WkMsgID:WkMsgf:WKMSG:WkDta);
  |           On-Error;
VV07          EndMon;
  |           AddToXml('BrokerLineItemNumber' : *Blanks :'Attribute');
  |
  |   *?      // Read cross reference to get BrokerMaterialID for new order lines
  |           WkItem = (%Trim(WkOIITEM) + %Trim(WkOISIZE));
  |           Chain (PHFRORID : 'Customer' :WkItem) XREFINVTL1;
  |           If %found;
  |              AddToXml('BrokerMaterialNumber' : XRFORKEY : 'Attribute');
  |              AddToXml('MaterialDescription' : XRDESC : 'Attribute');
  |           Else;
  |              AddToXml('BrokerMaterialNumber' : *Blanks : 'Attribute');
  |              AddToXml('MaterialDescription' : *Blanks : 'Attribute');
  |           Endif;
  |           AddToXml('CommittedInventoryPONumber' : PHBRKORID: 'Attribute');
VV07          AddToXml('LineItemComment' : WKMSG : 'Attribute');
SUD02         AddToXml('RejectionCode' : RejectionCode_NewLine: 'Attribute');       //WJB01
SUD04         If PHFRORID = 'Gloeckner';
  |              If WkOQty = *Zeros;
  |                 AddToXml('OrderdQty' : '0' : 'Attribute');
  |              Else;
  |                 AddToXml('OrderdQty' : %Char(WkOQty) : 'Attribute');
  |              Endif;
  |           Else;
  |              AddToXml('OrderdQty' : *Blanks  : 'Attribute');
SUD04         Endif;
SUD02
  |   *?      // Check the Line Already Acknowledged
  |           Chain (OHORD#:WkOILIST:WkOIITEM:WkOISIZE) WSERREXPL3;
SUD02         If %Found;

      *?         // For Gloeckner if existing line should be blanks
SUD07            If PHFRORID = 'Gloeckner' Or PHFRORID = 'Eason';
VV01                AddToXml('LineItemStatus' : ' ' : 'Attribute');  // ' ' =Existing Line
VV01             Else;
SUD02               AddToXml('LineItemStatus' : 'M' : 'Attribute');  // 'M' =Existing Line
VV01             Endif;
SUD02         Else;
  |              Exsr WrtExpInfo;
  |              AddToXml('LineItemStatus' : 'N' : 'Attribute');     // 'N' =New Line  WJB01
  |           Endif;
  |
  |           If PHFRORID = 'Ball Seed';
  |              AddToXml('LineItemPrice' : *Blanks  : 'Attribute');
  |              AddToXml('UnitofMeasure' : WkOIUUOM : 'Attribute');
  |              AddToXml('SubbedBrokerMaterial' : *Blanks : 'Attribute');
SUD02         Endif;

      *?      // Only for Gloeckner
SUD04         If PHFRORID = 'Gloeckner';
VV01             AddToXml('VendorLineItemNumber' : %Char(PDVENLNE) :
 |                                                'Attribute');
 |               AddToXml('TagRatio' : PDTAGRAT  :'Attribute');
 |               AddToXml('TagRatioDescription' : PDTAGRATD:'Attribute');
 |               AddToXml('TagRatioValue' : %Char(PDTAGRATV):'Attribute');
VV01          Endif;
SUD02
  |           AddToXml('VendorMaterialNumber' : XRFORKEY : 'Closetag');
  |        Endif;
  |
  |     Endsr;
  |   //--------------------------------------------------------------------
  |   *?                :-----------------------:
  |   *?                : WrtExpInfo Subroutine :
  |   *?                :-----------------------:
  |   *
  |     Begsr WrtExpInfo;
  |
  |   *?   // Clear record
  |        Clear WSERREXPR;
  |
  |   *?   // Move Valeus into Exception file fields
  |        ERBRKNAM  = PFromOrgId;
  |        ERBRKORID = PCustPO;
  |        ERRQSPDT  = %Date(OHDTRQ:*MDY);
  |        ERORDNO   = OHORD#;
  |        ERORDLIN  = WkOILIST;
  |        ERITMNUM  = WkOIITEM;
  |        ERITMSIZ  = WkOISIZE;
  |        ERQTYORD  = WkOQty;
  |        ERRMSG    = 'Partial record added in FIORDR';
  |        ERFLAG    = 'I';
  |        ERCRTDAT  = Rundate;
  |        ERCRTTIM  = Runtime;
  |        ERCRTUSR  = User;
  |        ERCRTJOB  = Job;
  |        ERCRTPGM  = Pgm;
  |
  |   *?   // Write record
  |        Write WSERREXPR;
  |
  |     Endsr;
SUD02 //--------------------------------------------------------------------
      *?                :--------------------------:
      *?                : UnknownItemSR Subroutine :
      *?                :--------------------------:
      *
        Begsr UnknownItemSR;

      *?   // Call CL program to Get Error Msg
           Monitor;
             WkMsgf  = 'WSMSGF';
             WkDta   = *Blanks;
             WkMsgId = 'WS00049';
             RtvErrMsg(WkMsgID:WkMsgf:WKMSG:WkDta);
           On-Error;
           EndMon;

      *?   // Read Unknown Item Records from XML file
           Setll (PFromOrgID:PHBRKORID:PHSEQNO) WSPODTLL1;
           ReadE (PFromOrgID:PHBRKORID:PHSEQNO) WSPODTLL1;
           Dow not %Eof;
              If PDFLAG = 'U';

      *?         // Move values from Xml Order File
                 AddToXml('Item': *Blanks : 'Opentag');
SUD07            If PFromOrgId <> 'Eason';
  |                 AddToXml('KP_proc' : 'WSPOACK003' : 'Attribute');
SUD07            Endif;
                 AddToXml('ConfirmedQty' : '0' : 'Attribute');
                 AddToXml('ScheduledShipDate': %Char(PDSCHSHDT):'Attribute');
                 AddToXml('BrokerLineItemNumber' : %Char(PDBRKLNE):'Attribute');
                 AddToXml('BrokerMaterialNumber' : PDBRKMAT : 'Attribute');
                 AddToXml('CommittedInventoryPONumber' : PDCOMINV :'Attribute');
                 AddToXml('MaterialDescription' : PDVENDSC : 'Attribute');
                 AddToXml('OrderdQty' : %Char(PDORDQTY) : 'Attribute');
                 AddToXml('LineItemComment' : WKMSG : 'Attribute');
                 AddToXml('RejectionCode' :RejectionCode_Cancel: 'Attribute');
                 AddToXml('LineItemStatus' : 'C' : 'Attribute');

                 If PHFRORID = 'Ball Seed';
                    AddToXml('LineItemPrice' : %Char(PDLNITMPR) : 'Attribute');
                    AddToXml('UnitofMeasure' : ' ' : 'Attribute');
                    AddToXml('SubbedBrokerMaterial' : *Blanks : 'Attribute');
                 Endif;
                 AddToXml('VendorMaterialNumber' : PDVENMAT : 'Closetag');    // Close Tag

VV04  *?         // Update KP Line Item Comment in XML Order Detail File
  |              PDKPITMCM = WKMSG;
  |              Update WSPODTLR %Fields(PDUPDDAT:PDUPDTIM:
VV04                                     PDUPDUSR:PDUPDJOB:PDUPDPGM:PDKPITMCM);
              Endif;

              ReadE (PFromOrgID:PHBRKORID:PHSEQNO) WSPODTLL1;
           Enddo;

        Endsr;
      //--------------------------------------------------------------------
VV03  *?                :--------------------------:
  |   *?                : DeletedItemSR Subroutine :
  |   *?                :--------------------------:
  |   *
  |     Begsr DeletedItemSR;
  |
  |   *?   // Call CL program to Get Error Msg
  |        Monitor;
  |          WkMsgf  = 'WSMSGF';
  |          WkDta   = *Blanks;
  |          WkMsgId = 'WS00088';
  |          RtvErrMsg(WkMsgID:WkMsgf:WKMSG:WkDta);
  |        On-Error;
  |        EndMon;
  |
  |   *?   // Read all Item Records from XML file
  |        Setll (PFromOrgID:PHBRKORID:PHSEQNO) WSPODTLL1;
  |        ReadE (PFromOrgID:PHBRKORID:PHSEQNO) WSPODTLL1;
  |        Dow Not %Eof;
  |
  |   *?      // Do not check for unmapped Items again
  |           If PDFLAG <> 'U';
  |
  |   *?         // Check if line is deleted in FIORDR but found in XML file with OILIST
  |              WkLine = *Blanks;
  |              WkLine = %Char(PDORDLIN);
  |              Chain (PDORDNO:WkLine) FIORDRL15;
  |              If Not %Found();
  |
  |   *?            // Move values from Xml Order File
  |                 AddToXml('Item': *Blanks : 'Opentag');
SUD07               If PFromOrgId <> 'Eason';
  |                    AddToXml('KP_proc' : 'WSPOACK003' : 'Attribute');
SUD07               Endif;
  |                 AddToXml('ConfirmedQty' : '0' : 'Attribute');
  |                 AddToXml('ScheduledShipDate': %Char(PDSCHSHDT):'Attribute');
  |                 AddToXml('BrokerLineItemNumber':%Char(PDBRKLNE)
  |                                                :'Attribute');
  |                 AddToXml('BrokerMaterialNumber' : PDBRKMAT : 'Attribute');
  |                 AddToXml('CommittedInventoryPONumber':PDCOMINV:'Attribute');
  |                 AddToXml('MaterialDescription' : PDVENDSC : 'Attribute');
  |                 AddToXml('OrderdQty' : %Char(PDORDQTY) : 'Attribute');
  |                 AddToXml('RejectionCode':RejectionCode_CancelK:'Attribute');
  |                 AddToXml('LineItemStatus' : 'C' : 'Attribute');
  |
  |                 If PHFRORID = 'Ball Seed';
  |                    AddToXml('LineItemPrice':%Char(PDLNITMPR):'Attribute');
  |                    AddToXml('UnitofMeasure' : ' ' : 'Attribute');
  |                    AddToXml('SubbedBrokerMaterial' : *Blanks : 'Attribute');
  |                 Endif;
  |
  |   *?            // Write message to FIORDRB2B1 file
  |                 B2BORD# = PDORDNO;
  |                 B2BSEQ# = PDORDLIN;
  |                 B2BCMNT = WKMSG;
  |                 B2BTIME = %Timestamp();
  |                 B2BUSER = PDUPDUSR;
  |                 Write RIORDRB2BC;
  |
  |   *?            // Send latest comment from file FIORDRB2B1 in Ack for order/line
  |                 WkLICmt = *Blanks;
  |                 Setll (PDORDNO:PDORDLIN) FIORDRB2B1;
  |                 Reade (PDORDNO:PDORDLIN) FIORDRB2B1;
  |                 If %Equal;
  |                    PDKPITMCM = B2BCMNT;
  |                    WkLICmt   = B2BCMNT;
  |                 Endif;
VV05                AddToXml('LineItemComment' : WkLICmt : 'Attribute');

VV04                Update WSPODTLR %Fields(PDUPDDAT:PDUPDTIM:
VV04                                     PDUPDUSR:PDUPDJOB:PDUPDPGM:PDKPITMCM);

VV03                AddToXml('VendorMaterialNumber' : PDVENMAT : 'Closetag');    // Close Tag
  |              Endif;
  |           Endif;
  |
  |        ReadE (PFromOrgID:PHBRKORID:PHSEQNO) WSPODTLL1;
  |        Enddo;
  |
VV03    Endsr;
      //--------------------------------------------------------------------
      *?            :-----------------------:
      *?            : WSHdrAudit Subroutine :
      *?            :-----------------------:
      *
      *?Logic : Move values into Audit Fields
      *?
        Begsr WSHdrAudit;

      *?   // Audit Stamp
           PHUPDDAT = Rundate;
           PHUPDTIM = Runtime;
           PHUPDUSR = User;
           PHUPDJOB = Job;
           PHUPDPGM = Pgm;

        Endsr;
      //--------------------------------------------------------------------
      *?            :-----------------------:
      *?            : WSDtlAudit Subroutine :
      *?            :-----------------------:
      *
      *?Logic : Move values into Audit Fields
      *?
        Begsr WSDtlAudit;

      *?   // Audit Stamp
           PDUPDDAT = Rundate;
           PDUPDTIM = Runtime;
           PDUPDUSR = User;
           PDUPDJOB = Job;
           PDUPDPGM = Pgm;

        Endsr;
SUD01 //--------------------------------------------------------------------
  |   *?            :---------------------:
  |   *?            : ChgOrdSr Subroutine :
  |   *?            :---------------------:
  |   *
  |   *?Logic : Check Change Order XML file for the broker ID . If Flag = 'X'
  |   *?        then process the change order
  |   *?
  |     Begsr ChgOrdSr;
  |
  |   *?   // Read Change Order XML file for the Broker
  |        Setll (PFromOrgId : PCustPO) WSCOHDRL1;
  |        ReadE(N) (PFromOrgId : PCustPO) WSCOHDRL1;
  |        Dow Not %Eof;
  |           If CHFLAG = 'X';
  |              WkSeqNo = CHSEQNO;
  |
  |   *?         // Get Orderline number from Order Control file
  |              Exsr GetOrdLin;
  |
  |              WSCOVAL002(PFromOrgID:PCustPO:WkSeqNo:WkFlag);
  |              If WkFlag = 'C';
  |                 WSCOACK003(PFromOrgID:PCustPO:WkSeqNo:PBrkAck);
  |              Endif;
  |           Endif;
  |           ReadE(N) (PFromOrgId : PCustPO) WSCOHDRL1;
  |        Enddo;
  |
  |     Endsr;
  |   //--------------------------------------------------------------------
  |   *?            :----------------------:
  |   *?            : GetOrdLin Subroutine :
  |   *?            :----------------------:
  |   *
  |   *?Logic : Get OrderLine for XML Change order file
  |   *?
  |     Begsr GetOrdLin;
  |
  |   *?   // Read Change Order Detail XML file for the Broker
  |        Setll (PFromOrgId : PCustPO : WkSeqNo) WSCODTLL1;
  |        ReadE (PFromOrgId : PCustPO : WkSeqNo) WSCODTLL1;
  |        Dow Not %Eof;
  |           WkOrdLin = *Zeros;
  |           WkLineItemNo = CDBRKLNE;
  |           WkBrkItem    = CDBRKMAT;
  |
SUD01 *?      // Get Order Line from Control File
SUD06         Exsr UpdOrdLin;
SUD01
  |   *?      // Update XMl file with Order number and Line number
  |           CDORDLIN = WkOrdLin;
  |           CDORDNO  = WkOrder;
  |           Update WSCODTLR %Fields(CDORDLIN:CDORDNO);
  |
  |           ReadE (PFromOrgId : PCustPO : WkSeqNo) WSCODTLL1;
  |        Enddo;
  |
SUD01   Endsr;
SUD06 //--------------------------------------------------------------------
  |   *?            :----------------------:
  |   *?            : UpdOrdLin Subroutine :
  |   *?            :----------------------:
  |   *
  |   *?Logic : Get Order# & Line# from WSORCHCPF - Order Control File
  |   *
  |     Begsr UpdOrdLin;
  |
  |   *?   // Check Record Exists in WSORCHCPF
  |        WkOrdLin = *Zeros;
  |        Exec Sql
  |           Select OCORDLIN Into :WkOrdLin from WSORCHCPF
  |           Where OCFRORID = :PFromOrgId And
  |           OCBRKORID = :PCustPO and OCORDNO = :WkOrder and
  |           OCBRKLNE = :WkLineItemNo and OCBRKMAT = :WkBrkItem;
  |
  |   *?   // If Order Line not found in for the combination check
  |   *?   // Control file without Broker Item/Line for manually added lines
  |        If WkOrdLin = *Zeros;
  |           Chain (PFromOrgId:'Customer':WkBrkItem) XREFINVTL0;
  |           If %Found;
  |              WkItem = XRLCLITEM;
  |              WkSize = XRLCLSIZE;
  |              Exec SQL
  |              Select OCORDLIN Into :WkOrdLin from WSORCHCPF
  |              Where OCFRORID = :PFromOrgId And
  |              OCBRKORID = :PCustPO and OCORDNO = :WkOrder and
  |              OCITEM = :WkItem and OCIMSZE = :WkSize and
  |              OCBRKLNE = 0 and OCBRKMAT = ' ';
  |
  |              If WkOrdLin <> *Zeros and OCBRKMAT = ' '  and
  |                                        OCBRKLNE = 0;
  |                 Chain (PFromOrgId:PCustPO:WkOrder:WkItem:
  |                                   WKSize) WSORCHCL2;
  |                 If %Found;
  |                    OCUPDDAT = Rundate;
  |                    OCUPDTIM = Runtime;
  |                    OCUPDUSR = User;
  |                    OCUPDJOB = Job;
  |                    OCUPDPGM = Pgm;
  |                    OCBRKLNE = WkLineItemNo;
  |                    OCBRKMAT = WkBrkItem;
  |                    Update WSORCHCR %Fields(OCBRKMAT:OCBRKLNE:OCUPDDAT
  |                                  :OCUPDTIM:OCUPDUSR:OCUPDJOB:OCUPDPGM);
  |                 Endif;
  |              Endif;
  |           Endif;
  |        Endif;
  |
SUD06   Endsr;
SUD05 //--------------------------------------------------------------------
  |   *?                :--------------------:
  |   *?                : CallCmd Subroutine :
  |   *?                :--------------------:
  |   *
  |     Begsr CallCmd;
  |
  |   *?   // Call QCMDEXC ,Monitor if there is a error
  |        Monitor;
  |           QCmdExc(%Trim(Cmd): %Len(%Trim(Cmd)));
  |        On-Error;
  |        EndMon;
  |
SUD05   Endsr;
      //--------------------------------------------------------------------
SUD09 *?                :--------------------------:
  |   *?                : CheckItemAuth Subroutine :
  |   *?                :--------------------------:
  |   *
  |   *?Logic : Check Item Authorization for Item and Broker
  |   *?
  |     Begsr CheckItemAuth;
  |
  |   *?   // Check Item Authorization for Item and Broker
  |        If CHFRORID = 'Ball Seed';
  |           ThisType = 'Ball Seed';
  |        Else;
  |           ThisType = 'WEB';
  |        Endif;
  |
  |   *?   // Call Inventory Availability Status Program
  |        Error   = *Zeros;
  |        ErrDesc = *Blanks;
  |        RqToday = PHRQSHDT;                         // Today MDY
  |        If WkOQty = *Zeros;
  |           INVAVLSTS(WkOIITEM:WkOISIZE:RqToday:
  |                     ThisType:Error:ErrDesc);
  |        Endif;
  |
  |     Endsr;
SUD09 //--------------------------------------------------------------------
      *?                :--------------------:
      *?                : AddToXml Procedure :
      *?                :--------------------:
      *
      *?Logic   : AddToXml to generate XML Acknowledgement
      *?          Field by field process
      *?Example : Starttag : <Tagname>
      *?          Opentag  : <Tagname
      *?          Closetag :  Tagname/>
      *?          Close    :  Tagname>
      *?          Endtag   : </Tagname>
      *
        Dcl-Proc  AddToXml;
           Dcl-Pi AddToXml;
              Tagname      Char(50)  Value;
              Tagvalue     Char(300) Value;
              Info         Char(10)  Value;
           End-Pi;

      *?   // Replace Special Characters
SUD03      If TagValue <> *Blanks;
  |           TagValue = %ScanRpl('&': '&amp;': TagValue);
  |           TagValue = %ScanRpl('''': '&apos;' : TagValue);
  |           TagValue = %ScanRpl('"': '&quot;' : TagValue);
SUD03      Endif;

      *?   // Check Info to add XML tag
           Select;

              When Info = 'Starttag';
                 Xml = %Trimr(Xml) + '<' + %Trim(Tagname)
                                 + %Trim(Tagvalue)  + '>';

              When Info = 'Opentag';
                 Xml = %Trimr(Xml) + ' ' + '<' + %Trim(Tagname) ;

              When Info = 'Attribute';
                 Xml = %Trimr(Xml) + ' ' + %Trim(Tagname) + '="'
                                 + %Trim(Tagvalue) + '" ';

              When Info = 'Closetag';
                 Xml = %Trimr(Xml) + ' ' + %Trim(Tagname) + '="'
                                   + %Trim(Tagvalue) + '"' + ' />';

              When Info = 'Close';
                  Xml = %Trimr(Xml) + ' ' + %Trim(Tagname) + '="'
                                   + %Trim(Tagvalue) + '"' + ' >';

              When Info = 'Endtag';
                  Xml = %Trimr(Xml) + ' </' + %Trim(Tagname) + '>';

           Endsl;

      *?   // Write XML Line into IFS
           Exsr WriteIFS;
      *
      //--------------------------------------------------------------------
      *?            :---------------------:
      *?            : WriteIFS Subroutine :
      *?            :---------------------:
      *
      *?Logic : Write Each tag as a Record into Flat File
      *?
        Begsr WriteIFS;

      *?   // Check Info to add XML tag
           Select;

              When Info = 'Starttag';
                 XmlIfs =  '<' + %Trim(Tagname)
                                 + %Trim(Tagvalue)  + '>';

              When Info = 'Opentag';
                 XmlIfs =  '<' + %Trim(Tagname) ;

              When Info = 'Attribute';
                 XmlIfs =  %Trim(Tagname) + '="'
                                 + %Trim(Tagvalue) + '" ';

              When Info = 'Closetag';
                 XmlIfs =  %Trim(Tagname) + '="'
                                   + %Trim(Tagvalue) + '"' + ' />';

              When Info = 'Close';
                 XmlIfs =  %Trim(Tagname) + '="'
                                   + %Trim(Tagvalue) + '"' + ' >';

              When Info = 'Endtag';
                 XmlIfs = ' </' + %Trim(Tagname) + '>';

           Endsl;

      *?   // Insert into Flat File
           Exec Sql
           INSERT INTO IFSXML Values(Trim(:XMLIFS));

        Endsr;

        End-Proc;
      //--------------------------------------------------------------------
      *?                :-------------------------:
      *?                : RejectionCode Procedure :
      *?                :-------------------------:
      *
        Dcl-Proc  RejectionCode ;
           Dcl-Pi RejectionCode Char(4);
             WkBroker  Char(20) Value;
             RejectionType  Char(30) Value;
           End-Pi;

      *?   // Get Rejection Code from FBROKDFT file  based on Quantity
           WkReject = *Blanks;
           Chain (WkBroker : RejectionType) FBrokDftL0;
           If %Found;
              WkReject = %Trim(DFVARVAL);
           Endif;
           Return WkReject;

        End-Proc;
      *?------------- End of Program ----------------------------------
