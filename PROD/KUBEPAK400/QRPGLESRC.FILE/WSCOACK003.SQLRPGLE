      *? Program        : WSCOACK003
      *?
      *? Description    : This program to Generate Acknowledgement XML
      *?                  for Order Change Process
      *? Created By     : Reddaiah N.P/ S.Uthayadurga
      *?
      *? Date           : 18 Oct 2017
      //--------------------------------------------------------------------
      *? Special Notes  : ** Generate Acknowledgement XML for Brokers
      *?                : ** Write XML data into IFS stream file
      *?                : ** Send Acknowledgement through FTP/POSTXML based on
      *?                     Broker Default File
      *?                : ** Send Email Acknowledgement for Eason
      *
      *? Called Program : WSPOSTXML - WS - POST XML to Client Site
      *?                  WSSNDFTPC - WS - SEND Inv & Ack xml files to Brokers using FTP
      *?                  WSRTVMSG  - WS - Retrieve message from Message file
      *?                  WSEMLACKB - WS - Email Order Ack. to Bill to Customer
      *?                  QCMDEXC   - Pgm To Call CL command in Rpg
      *?                  INVAVLSTS - Inventory Availability Status
      *
      *? Response       : Status for Brokers
      //--------------------------------------------------------------------
      *?                :---------------:
      *?                : Modifications :
      *?                :---------------:
      * ------  --------   ----------   ------------------------------------
      * MOD#    MOD Date   Programmer   Description
      * ------  --------   ----------   ------------------------------------
      *         02/13/18   WJB          Change codes passed for 'LineItemStatus'
      *         02/14/18   WJB          Change OverAllProcessStatus Flag hardcode to 'M'
      *?Phase II
      * SUD01   03/29/18   S.Uthaya     ItemSr issue fixed
      * SUD02   04/02/18   S.Uthaya     Special Character replacement
      * VV01    04/30/18   Vimala V     Added New brokers for Phase II Changes
      * SUD03   05/04/18   S.Uthaya     Phase II Changes
      * SUD04   07/31/18   S.Uthaya     Added FTP Process
      * VV02    08/09/18   Vimala V     Ship Via Cross Reference from XREFSVIO file
      * SUD05   08/21/18   S.Uthaya     Removed KP_proc tag for Eason
      *         08/23/18   S.Uthaya     Removed Periods from File name for Eason
      *         08/28/18   S.Uthaya     Changed LineItemStatus Values for Eason
      * SUD06   10/04/18   S.Uthaya     Added Email Acknowledgement for Eason
      * SUD07   11/12/18   S.Uthaya     For Not Authorized Item, Send Error Msg
      *                                 into LineItemComment
      * VV03    11/29/18   Vimala V     Include logic to send line for Items
      *                                 deleted manually (not 'D' status record)
      *                                 in FIORDR but found in XML files
      * VV04    12/06/18   Vimala V     Populate Error Description returned by
      *                                 INVAVLSTS program in field KP LineItemComment
      *                                 or any error/msg generated by KubePak
      * VV05    12/19/18   Vimala V     Write Error Description returned by
      *                                 INVAVLSTS program to file FIORDRB2B1 and send
      *                                 the lastest comment based on timestamp
      *                                 from FIORDRB2B1 file in KP LineItemComment
      * VV06    08/01/19   Vimala V     Delete Order from file AUTOACKPF after sending
      *                                 Acknowledgement to Brokers
      * VV07    02/01/19   Vimala V     Do not call INVAVLSTS and write comment in
      *                                 FIORDRB2B1 - Take latest record to send in Ack
      * VV08    02/13/19   Vimala V     If Orderline from FIORDR not found in xml, send
      *                                 message instead of Item Description in LineItemComment
      *                                 Change CPY cmd to reduce the size of the file in IFS
      //--------------------------------------------------------------------
      *?                :----------------------:
      *?                : Header Specification :
      *?                :----------------------:
      *
        Ctl-Opt DftActGrp(*NO) Option(*NoDebugIO)
           ActGrp ('HTTP') BndDir('QC2LE');
      //--------------------------------------------------------------------
      *?                :--------------------:
      *?                : File Specification :
      *?                :--------------------:
      *
      *?File: WS - Xml Order Change Header Logical File
      *?Key : From Org ID:Customer PO:Sequence No
        Dcl-F WSCOHDRL1  Disk(*Ext) Keyed Usage(*Update:*Output);
      *
      *?File: WS - Xml Order Change Detail Logical File
      *?Key : From Org ID:Customer PO:Header Seq No:Order Seq #:Order Line#
        Dcl-F WSCODTLL1  Disk(*Ext) Keyed Usage(*Update:*Output);
      *
      *?File: Order Header Record
      *?Key : Order Number
        Dcl-F FHORDR  Disk(*Ext) Keyed Usage(*Input);
      *
      *?File: Order Detail Record
      *?Key : Order Number:List Code
        Dcl-F FIORDRL15  Disk(*Ext) Keyed Usage(*Input);
      *
      *?File: Order Detail Partial Item Record
      *?Key : Order Number:List Code
        Dcl-F FIORDRPART Disk(*Ext) Keyed Usage(*Input) Prefix(H);
      *
      *?File: WS - Broker Defaults and Control Logical File
      *?Key : Broker Number:Broker Variable
        Dcl-F FBROKDFTL0 Disk(*Ext) Keyed Usage(*Input);
      *
      *?File: Item Cross Reference Logical File
      *?Key : Provided Name:Provided Type:Local Key
        Dcl-F XREFINVTL1 Disk(*Ext) Keyed Usage(*Input);
      *
      *?File: Customer Master File
      *?Key : Customer Code
        Dcl-F FMCUST Disk(*Ext) Keyed Usage(*Input);
      *
      *?File: Size Code Master File
      *?Key : Size Code
        Dcl-F FMSIZE Disk(*Ext) Keyed Usage(*Input);
      *
      *?File: Xml Order Error Exception File
      *?Key : OrderNO:OrderLine:Item:Item Size
        Dcl-F WSERREXPL3 Disk(*Ext) Keyed Usage(*Update:*Output);
      *
VV02  *?File: Ship Via Cross Reference for Outbound
 |    *?Key : ProvidedbyName:Type:Local Key
VV02    Dcl-F XREFSVIOL0 Disk(*Ext) Keyed Usage(*Input);
      *
VV05  *?File: Order Detail B2B Coments
  |   *?Key : Order Number: Order Line:TimeStamp(D)
VV05    Dcl-F FIORDRB2B1 Disk(*Ext) Keyed Usage(*Input:*Output);
      //--------------------------------------------------------------------
      *?                :--------------------:
      *?                : Data Specification :
      *?                :--------------------:
      *
      *?Procedure Interface Declaration : *Entry
        Dcl-Pi WSCOACK003;
           PFromOrgId    Like(CHFRORID);
           PCustPO       Like(CHBRKORID);
           PSeqNo        Like(CHSEQNO);
           PBrkAck       Char(1000000) Options(*Varsize);
        End-Pi;
      *
      *?Procedure Prototype Declaration : To POST XML to Ball Site
        Dcl-Pr WSPOSTXML  Extpgm;
           PBrkAck    Char(1000000) Options(*Varsize);
           PFromOrgId Char(30)      Options(*Varsize);
           PFlag      Char(1);
           HttpStatus Int(10:0);
        End-Pr;
      *
SUD04 *?Procedure Prototype Declaration : Send FTP Program
  |     Dcl-Pr WSSNDFTPC  Extpgm;
  |        PPgmName  Char(10);
  |        PLogName  Char(10);
SUD04   End-Pr;
      *
SUD06 *?Procedure Prototype Declaration : Send Email Acknowledgement
  |     Dcl-Pr WSEMLACKB  Extpgm;
  |        POrder#  Packed(6);
SUD06   End-Pr;
      *
SUD07 *?Procedure Prototype Declaration : Check on the Inventory availability status
  |     Dcl-Pr INVAVLSTS Extpgm;                   // Rpg Program
  |        Item          Char(12);                 // Item
  |        Size          Char(3);                  // Size
  |        ThisDate      Date(*Usa);               // Ready Date
  |        ThisType      Char(10);                 // Plug-View-Type
  |        ErrorNumber   Zoned(1:0);               // Error
  |        ErrDesc       Char(10);                 // Error Description
SUD07   End-Pr;
      *
      *?Procedure Prototype Declaration : Pgm to Call Command
        Dcl-Pr QCMDEXC Extpgm;
           Cmd Char(2000)   Const Options(*Varsize);
           Len Packed(15:5) Const;
        End-Pr;
      *
      *?Procedure Prototype Declaration : Call CL program to Retreive MSG
        Dcl-Pr RtvErrMsg Extpgm('WSRTVMSG');            // CL Program
           WkMsgId  Char(7);                            // Msg Id
           WkMsgF   Char(10);                           // Msg File
           WKMsg    Char(132);                          // Msg
           WkDta    Char(10);                           // Msg Data
        End-Pr;
      *
      *?Procedure Prototype Declaration : AddXml Part
        Dcl-Pr AddToXml;
           Tagname      Char(50)    Value;
           Tagval       Char(300)   Value;
           Info         Char(10)    Value;
        End-Pr;
      *
      *?Program Status Data Structure :
        Dcl-Ds Pgmstatus PSDS;
           Job     Char(10) Pos(244);
           User    Char(10) Pos(254);
           Rundate Zoned(6) Pos(276);
           Runtime Zoned(6) Pos(282);
           Pgm     Char(10) Pos(334);
        End-Ds;
      *
      *?Global Variable Declaration :
        Dcl-S Cmd        Char(2000)    Inz;
        Dcl-S Xml        Char(1000000) Inz;
        Dcl-S XmlIfs     Char(300)     Inz;
        Dcl-S Info       Char(10)      Inz;
        Dcl-S HttpStatus Int(10:0);
SUD07   Dcl-S ThisType   Char(10)      Inz;           // Plug-View-Type
  |     Dcl-S ErrDesc    Char(40)      Inz;           // Error Description
  |     Dcl-S Error      Zoned(1:0)    Inz;           // Error
SUD07   Dcl-S RqToday    Date(*Usa)    Inz;           // Requested ShipDate
      *
      *?Work Variable Declaration :
        Dcl-S WkDtTm    Char(19)    Inz;
        Dcl-S WkPath    Char(75)    Inz;
        Dcl-S WkFile    Char(75)    Inz;
        Dcl-S WkOQty    Zoned(11)   Inz;
        Dcl-S WkItem    Char(15)    Inz;
        Dcl-S WkDate    Date(*ISO)  Inz;
        Dcl-S WkRqdt    Char(10)    Inz;
        Dcl-S WkBroker  Char(20)    Inz;
        Dcl-S WkLine    Char(4)     Inz;
        Dcl-S WkLin1    Zoned(4)    Inz;
        Dcl-S WkOrdQty  Zoned(11:2) Inz;
        Dcl-S WkReject  Char(4)     Inz;
        Dcl-S WkOILIST  Zoned(3)    Inz;
        Dcl-S WkOISEQ#  Zoned(3)    Inz;
        Dcl-S WkOIDTRQ  Zoned(6)    Inz;
        Dcl-S WkOIUUOM  Char(2)     Inz;
        Dcl-S WkOIITEM  Char(12)    Inz;
        Dcl-S WkOISIZE  Char(3)     Inz;
        Dcl-S WkOIDES1  Char(30)    Inz;
        Dcl-S WkOIITYP  Char(1)     Inz;
        Dcl-S WkMsgf    Char(10)    Inz;              // Used for Msg File
        Dcl-S WkMsgId   Char(7)     Inz;              // Used for Msg File
        Dcl-S WkMsg     Char(132)   Inz;              // Used for Msg File
        Dcl-S WkDta     Char(10)    Inz;              // Used for Msg File
SUD04   Dcl-S WkFtp     Char(1)     Inz;
SUD05   Dcl-S WkTmSt    Char(26)    Inz;
VV05    Dcl-S WkLICmt   Char(50)    Inz;
      *
      *?Rejection Codes Declaration :
        Dcl-S RejectionCode_Cancel  Char(4) Inz;
        Dcl-S RejectionCode_Confirm Char(4) Inz;
        Dcl-S RejectionCode_NewLine Char(4) Inz;
VV01    Dcl-S RejectionCode_Change  Char(4) Inz;
        Dcl-S RejectionCode_CancelK Char(4) Inz;
      *
      *?Parameter Variable Declaration :
        Dcl-S PFlag      Char(1);
SUD04   Dcl-S PPgmName   Char(10)  Inz;
SUD04   Dcl-S PLogName   Char(10)  Inz;
SUD06   Dcl-S POrder#    Packed(6) Inz;
      //--------------------------------------------------------------------
      *?                :------------------:
      *?                : Calculation Spec :
      *?                :------------------:
      *
      *?Main Line :

           Exsr InzPgm;
           Exsr EndPgm;

      //--------------------------------------------------------------------
      *?                :-----------------------:
      *?                : Initialise Subroutine :
      *?                :-----------------------:
      *
        Begsr InzPgm;

      *?   // Clear XML
           Clear PBrkAck;

      *?   // Get Date and Time
           WkDtTm = %Char(%Date) + 'T' + %Char(%Time());

VV08  *?   // Create IFSXML temp file in QTEMP
  |   * // Cmd = 'CRTPF FILE(QTEMP/IFSXML) RCDLEN(300)';
VV08  * // Exsr CallCmd;
VV08  *?   // Create IFSXML temp file in QTEMP
  |        Exec SQL create or replace table QTEMP.IFSXML (IFSXML VARCHAR(300));
VV08       Exec SQL delete from qtemp.IFSXML;

      *?   // Execute Process
           Exsr Process;

SUD04 *?   // Execute PostXml
SUD04      Exsr PostXml;

        Endsr;
SUD04 //--------------------------------------------------------------------
  |   *?                :--------------------:
  |   *?                : PostXml Subroutine :
  |   *?                :--------------------:
  |   *
  |   *?Logic : Check Broker default file and process POST Acknowledgement
  |   *
  |     Begsr PostXml;
  |
  |   *?   // Post XML
  |        If PBrkAck <> *Blanks;
  |
  |   *?      // Use FTP for Specified Brokers
  |           WkFtp = '0';
  |           Chain (WkBroker : 'USEFTP' ) FBROKDFTL0;
  |           If %Found;
  |              WkFtp = %Trim(DFVARVAL);
  |           Endif;
  |
  |   *?      // Use Webservice
  |           If WkFtp = '0';
  |              PFlag = 'A';
  |              WSPOSTXML(PBrkAck:PFromOrgId:PFlag:HttpStatus);
  |              PBrkAck = 'Order ' + %Char(OHORD#) + ' Changed and '   +
  |                        'Acknowledgement sent successfully for PO: ' +
  |                        CHBRKORID;
  |           Endif;
VV06  *  //Endif;                           //Given in the end
  |
SUD04 *?   // Create stream file
SUD05         Exsr CreateIfsSr;
SUD04
  |   *?      // Only for FTP Process
  |           If WkFtp = '1';
  |              Chain (WkBroker : 'IFSACKFTP' ) FBROKDFTL0;
  |              If %Found;
  |                 WkPath = %Trim(DFVARVAL);
  |              Endif;
VV08  *   //     Cmd = 'CPYTOIMPF FROMFILE(IFSXML) STMFCODPAG(1208) ' +
  |   *   //         'TOSTMF(''' + %Trim(WkPath) + %Trim(WkFile) + ''')'
VV08  *   //         + ' MBROPT(*REPLACE) RCDDLM(*CRLF) DTAFMT(*FIXED)';
VV08             Cmd = 'CPYTOIMPF FROMFILE(IFSXML) STMFCODPAG(1208)'
  |                  + ' TOSTMF(''' + %Trim(WkPath) + %Trim(WkFile) + ''')'
  |                  + ' MBROPT(*REPLACE) RCDDLM(*CRLF) DTAFMT(*DLM)'
VV08                 + ' STRDLM(*NONE) RMVBLANK(*TRAILING)';
  |              Exsr CallCmd;
  |
  |   *?         // Send Acknowledgement FTP programs based on Brokers
  |              If WkBroker = '3953';                 // Eason
  |                 PPgmName = 'WSACKEHFTP';
  |                 PLogName = 'WSACKEHLOG';
  |              Elseif WkBroker = '9251';             // Vaughans
  |                 PPgmName = 'WSACKVNFTP';
  |                 PLogName = 'WSACKVNLOG';
  |              Elseif WkBroker = '1947';             // McHutchison
  |                 PPgmName = 'WSACKMCFTP';
  |                 PLogName = 'WSACKMCLOG';
  |              Endif;
  |              WSSNDFTPC(PPgmName:PLogName);
  |
  |   *?         // Remove Link from IFS
  |              Cmd = 'RMVLNK OBJLNK(''' + %Trim(WkPath)
  |                                       + %Trim(Wkfile) + ''')';
  |              Exsr CallCmd;
  |
  |           Endif;
  |
VV06  *?      // Delete Order from file AUTOACKPF
VV06          Exec Sql
VV06             Delete from AUTOACKPF where AAORD# = :OHORD#;
VV06       Endif;                           //PBrkAck <> ' '
  |
  |   *?   // Clear Flat File
  |        Cmd  = 'CLRPFM FILE(QTEMP/IFSXML)';
  |        Exsr CallCmd;
SUD04
SUD06 *?   // Send Email Acknowledgement for Eason
  |        If PFromOrgId = 'Eason';
  |           WSEMLACKB(OHORD#);
  |        Endif;
SUD06
SUD04   Endsr;
SUD05 //--------------------------------------------------------------------
  |   *?                :------------------------:
  |   *?                : CreateIfsSr Subroutine :
  |   *?                :------------------------:
  |   *
  |   *?Logic : Create IFS file name based on Broker
  |   *
  |     Begsr CreateIfsSr;
  |
  |   *?   // Get IFS Path
  |        Chain ('IFS' : 'IFSPATH' ) FBROKDFTL0;
  |        If %Found;
  |           WkPath = %Trim(DFVARVAL);
  |        Endif;
  |
  |   *?   // Create stream file Name based on Broker
  |        If PFromOrgId <> 'Eason';
  |           WkFile = 'PO-' + %Trim(CHBRKORID) + '_ORD#-' + %Char(OHORD#)
  |                       + '_'  + %Char(%Timestamp()) + '.xml';
  |        Else;
  |           WkTmSt = %Char(%Timestamp());
  |           WkTmSt = %ScanRpl('.' : '_' : WkTmSt);
  |           WkFile = 'PO-' + %Trim(CHBRKORID) + '_ORD#-' + %Char(OHORD#)
  |                       + '_'  + %Trim(WkTmSt) + '.xml';
  |        Endif;
  |
  |   *?   // Create stream file
VV08  * // Cmd = 'CPYTOIMPF FROMFILE(IFSXML) STMFCODPAG(1208) ' +
  |   * //       'TOSTMF(''' + %Trim(WkPath) + %Trim(WkFile) + ''')'
VV08  * //       + ' MBROPT(*REPLACE) RCDDLM(*CRLF) DTAFMT(*FIXED)';
VV08       Cmd = 'CPYTOIMPF FROMFILE(IFSXML) STMFCODPAG(1208)'
  |            + ' TOSTMF(''' + %Trim(WkPath) + %Trim(WkFile) + ''')'
  |            + ' MBROPT(*REPLACE) RCDDLM(*CRLF) DTAFMT(*DLM)'
VV08           + ' STRDLM(*NONE) RMVBLANK(*TRAILING)';
  |        Exsr CallCmd;
  |
SUD05   Endsr;
      //--------------------------------------------------------------------
      *?                :-------------------:
      *?                : Endpgm Subroutine :
      *?                :-------------------:
      *
        Begsr EndPgm;

      *?   // Return
           *InLr = *On;
           Return;

        Endsr;
      //--------------------------------------------------------------------
      *?                :--------------------:
      *?                : Process Subroutine :
      *?                :--------------------:
      *
        Begsr Process;

      *?   // Check Record Exists and Process
           Chain (PFromOrgId:PCustPo:PSeqNo) WSCOHDRL1;
           If %Found;

      *?      // Start Tag
              AddToXml('BrokerAcknowledgement' : *Blanks : 'Starttag');

      *?      // XML Body
              Exsr IdentificationSR;
              Exsr OrderHeaderSR;
              Exsr OrderDetailSR;

      *?      // Update Process Flag Processed with Audit Stamp
              CHFLAG = 'P';
              Exsr WSHdrAudit;
              Update WSCOHDRR %Fields(CHFLAG:CHUPDDAT:CHUPDTIM
                                      :CHUPDUSR:CHUPDJOB:CHUPDPGM);

      *?      // End Tag
              AddToXml('BrokerAcknowledgement' : *Blanks : 'Endtag');

      *?      // Return Xml
              PBrkack = Xml;

           Endif;

        Endsr;
      //--------------------------------------------------------------------
      *?                :-----------------------------:
      *?                : IdentificationSR Subroutine :
      *?                :-----------------------------:
      *
        Begsr IdentificationSR;

      *?   // Move values into Identification Part
           AddToXml('Identification' : *Blanks : 'Opentag');
           AddToXml('MessageProtocol_ID':'BrokerAcknowledgement':'Attribute');

      *?   // Move values into FromOrgId/SenderOrgId from Parameter File
           Chain ('1000': PFromOrgId) FBrokDftL0;
           If %Found;
              WkBroker = %Trim(DFVARVAL);
           Endif;

      *?   // Get Rejection Code
           RejectionCode_Cancel   =
              RejectionCode(WkBroker :'RejectionCode_Cancel');
           RejectionCode_Confirm  =
              RejectionCode(WkBroker :'RejectionCode_Confirm');
           RejectionCode_NewLine  =
              RejectionCode(WkBroker :'RejectionCode_NewLine');
VV01       RejectionCode_Change   =
VV01         RejectionCode(WkBroker :'RejectionCode_Change');
SUD03      RejectionCode_CancelK  =
SUD03         RejectionCode(WkBroker :'RejectionCode_CancelK');

      *?   // Move values into FromOrgId and SenderOrgId from Parameter File
           Chain (WkBroker :'FromOrgId') FBrokDftL0;
           If %Found;
              AddToXml('FromOrg_ID' : %Trim(DFVARVAL): 'Attribute');
              AddToXml('SenderOrg_ID': %Trim(DFVARVAL): 'Attribute');
           Endif;

      *?   // Move values into ToOrgId from Parameter File
           Chain (WkBroker :'ToOrgId') FBrokDftL0;
           If %Found;
              AddToXml('ToOrg_ID' : %Trim(DFVARVAL): 'Attribute');
           Endif;

           AddToXml('Date' : WkDtTm : 'Closetag');

        Endsr;
      //--------------------------------------------------------------------
      *?                :--------------------------:
      *?                : OrderHeaderSR Subroutine :
      *?                :--------------------------:
      *
        Begsr OrderHeaderSR;

      *?   // Move values into OrderHeader Part
           AddToXml('OrderHeader' : *Blanks : 'Opentag');

      *?   // Move AcknowledgementType and Order ID
           Chain CHORDNO FHORDR;
           If %Found;
              AddToXml('AcknowledgementType' : OHSTAT : 'Attribute');
              AddToXml('VendorOrderID' : %Char(OHORD#) : 'Attribute');
           Endif;

      *?   // Move fields only for Ball
           If CHFRORID = 'Ball Seed';
              AddToXml('AirportCode' : CHAIRCDE : 'Attribute');
              AddToXml('BrokerCreatedTime' : %Char(CHBRKCRTM) : 'Attribute');
              AddToXml('BrokerUpdatedTime' : %Char(CHBRKUPTM) : 'Attribute');
              AddToXml('BrokerUpdatedDate' : %Char(CHBRKUPDT) : 'Attribute');
              AddToXml('BrokerUpdatedBy' : CHBRKUPBY : 'Attribute');
              AddToXml('RejectionStatus' : *Blanks : 'Attribute');
              AddToXml('HeaderComments' : CHHDRCMT : 'Attribute');
              AddToXml('CarrierNumber' : CHCARRNO : 'Attribute');
              AddToXml('CustomerReference' : *Blanks : 'Attribute');
              AddToXml('CommittedInventoryCode' : CHCMINCD : 'Attribute');
           Endif;

SUD04 *?   // Move fields only for Ball Seed/Eason
  |        If CHFRORID = 'Ball Seed' Or CHFRORID = 'Eason';
  |           AddToXml('ChangeOrderBatchNumber' : %Char(CHCHORNO): 'Attribute');
SUD04      Endif;

      *?   // Move fields only for Gloeckner
SUD03      If CHFRORID = 'Gloeckner';
VV01          AddToXml('BrokerRevision' : %Char(CHBRKRVN) : 'Attribute');
 |            AddToXml('RootingStation' : CHRTGSTN : 'Attribute');
 |            AddToXml('TagExchange' : CHEXCHNG :'Attribute');
 |            AddToXml('SalesRepName' : CHSALNAM : 'Attribute');
VV01       Endif;

VV02  *?   // Get Ship Method from XREFSVIO file
 |         Chain (CHFRORID :'Customer' : OHSHPC) XREFSVIOL0;
 |         If %Found;
 |            AddToXml('ShipMethod' : XRFORKEY : 'Attribute');
 |            If CHFRORID = 'Ball Seed';
 |               AddToXml('ShippingMethodDesc' : XRDESC : 'Attribute');
 |            Endif;
VV02       Endif;

      *?   // Common Tags
           AddToXml('CustomerPONumber' : CHCUSTPO : 'Attribute');
           AddToXml('BackOrderOK' : CHBKOROK : 'Attribute');
           AddToXml('OverAllProcessStatus' : 'M' : 'Attribute');   // WJB Hardcode to "M"
           AddToXml('RequestedShipDate' : %Char(CHRQSHDT) : 'Attribute');
           AddToXml('BrokerCreatedDate' : %Char(CHBRKCRDT) : 'Attribute');
           AddToXml('VendorNumber' : CHVENDNO : 'Attribute');
           AddToXml('BrokerOrderID' : CHBRKORID : 'Attribute');
           AddToXml('FreightPaymentMethod' : CHFREMTH : 'Attribute');
           AddToXml('ShippingInstructions' : CHSHPINS : 'Attribute');
           AddToXml('SubstitutionOK' : CHSUBSOK : 'Close');                 // Close Tag

           Exsr ShipToSR;
           Exsr SoldToSR;

           AddToXml('OrderHeader' : *Blanks : 'Endtag');

        Endsr;
      //--------------------------------------------------------------------
      *?                :-------------------:
      *?                : SoldTo Subroutine :
      *?                :-------------------:
      *
        Begsr SoldToSR;

           AddToXml('SoldTo' : *Blanks : 'Opentag');

      *?   // Move values from Order File
           Chain CHORDNO FHORDR;
           If %Found;
              AddToXml('SoldToName' : OHSLD1 : 'Attribute');
              AddToXml('SoldToAddress1' : OHSLD2 : 'Attribute');
              AddToXml('SoldToAddress2' : OHSLD3 : 'Attribute');
              AddToXml('SoldToState' : OHSLST : 'Attribute');
              AddToXml('SoldToCity' : OHSLCT : 'Attribute');
              AddToXml('SoldToZip' : OHSLZP : 'Attribute');
           Endif;

      *?   // Move values from Xml File
           If CHFRORID = 'Ball Seed';
              AddToXml('BrokerSoldToNumber' : CHSLDNUM : 'Attribute');
           Endif;

      *?   // Move values from Customer Master File
           Chain OHCUST FMCUST;
           AddToXml('SoldToCountry' : CMCOUN : 'Attribute');
           AddToXml('SoldToPhone' : %Char(CMPHON) : 'Attribute');

      *?   // Move values from XML File
           AddToXml('SoldToContactName' : CHSLDCON : 'Attribute');
           AddToXml('SoldToFax' : CHSLDFAX : 'Attribute');
           AddToXml('SoldToEmail' : CHSLDEML : 'Closetag');

        Endsr;
      //--------------------------------------------------------------------
      *?                :-------------------:
      *?                : ShipTo Subroutine :
      *?                :-------------------:
      *
        Begsr ShipToSR;

      *?   // Move values from Xml File
           AddToXml('ShipTo' : *Blanks : 'Opentag');

           If CHFRORID = 'Ball Seed';
              AddToXml('ShipToNonStandardAddress' : CHSHPNSAD : 'Attribute');
           Endif;
           AddToXml('ShipToContactName': CHSHPCON : 'Attribute');
           AddToXml('ShipToName' : CHSHPNAM : 'Attribute');
           AddToXml('BrokerShipToNumber' : CHSHPNUM : 'Attribute');
           AddToXml('ShipToAddress1' : CHSHPAD1 : 'Attribute');
           AddToXml('ShipToAddress2' : CHSHPAD2 : 'Attribute');
           AddToXml('ShipToState' : CHSHPSTE : 'Attribute');
           AddToXml('ShipToCity' : CHSHPCTY : 'Attribute');
           AddToXml('ShipToCountry ' : CHSHPCNTY : 'Attribute');
           AddToXml('ShipToZip' : CHSHPZIP : 'Attribute');
           AddToXml('ShipToFax' : CHSHPFAX : 'Attribute');
           AddToXml('ShipToPhone' : CHSHPPHN : 'Attribute');
           AddToXml('ShipToEmail' : CHSHPEML : 'Closetag');         // Close Tag

        Endsr;
      //--------------------------------------------------------------------
      *?                :--------------------------:
      *?                : OrderDetailSR Subroutine :
      *?                :--------------------------:
      *
        Begsr OrderDetailSR;

      *?   // Move values into Detail tags from Xml Xref Order File
           AddToXml('OrderDetails' : *Blanks : 'Starttag');

      *?   // Execute Item Part
           Exsr ItemSR;
           Exsr UnknownItemSR;
VV03       Exsr DeletedItemSR;

           AddToXml('OrderDetails' : *Blanks : 'Endtag');

        Endsr;
      //--------------------------------------------------------------------
      *?                :-------------------:
      *?                : ItemSR Subroutine :
      *?                :-------------------:
      *
        Begsr ItemSR;

      *?   // Check Record Exists with Flag "C" and Process
      *?   // Check Order Detail to get all records that were entered manually
           Setll CHORDNO FIORDRL15;
           ReadE CHORDNO FIORDRL15;
           Dow Not %Eof;
SUD01         If OIITYP <> 'C';
  |
  |   *?         // Accumulate quantity for manually adjusted line
  |   *?         // Write XML if OILIST changes
  |              If WkLine <> OILIST and WkLine <> *Blanks;
  |                 Exsr WrtItemSR;
  |                 WkOrdQty = *Zeros;
  |              Endif;
  |
  |   *?         // Move order line fields to work fields
  |              Exsr MoveFields;
  |              Chain (OIORD#:OISEQ#) FIORDRPART;
  |              If %Found;
  |                 WkOrdQty = WkOrdQty + ((OIQORD * HOIPCTF) / 100);
  |              Else;
  |                 WkOrdQty = WkOrdQty + OIQORD;
  |              Endif;
  |           Endif;
  |           WkLine = OILIST;
  |           Reade CHORDNO FIORDRL15;
  |        Enddo;
  |
  |   *?   // Write Last record
SUD01      If WkOIITYP = *Blanks;
              Exsr WrtItemSR;
           Endif;

        Endsr;
      //--------------------------------------------------------------------
      *?                :-----------------------:
      *?                : MoveFields Subroutine :
      *?                :-----------------------:
      *
        Begsr MoveFields;

      *?   // Move the current record values to work variables
           WkOISEQ# = OISEQ#;
           If OILIST <> *Blanks;
              WkOILIST = %Int(OILIST);
           Endif;
           WkOIDTRQ = OIDTRQ;
           WkOIUUOM = OIUUOM;
           WkOIITEM = OIITEM;
           WkOISIZE = OISIZE;
           WkOIDES1 = OIDES1;
           WkOIITYP = OIITYP;

        Endsr;
      //--------------------------------------------------------------------
      *?                :----------------------:
      *?                : WrtItemSR Subroutine :
      *?                :----------------------:
      *
        Begsr WrtItemSR;

      *?   // Move values from XML file
           AddToXml('Item': *Blanks : 'Opentag');
SUD05      If PFromOrgId <> 'Eason';
  |           AddToXml('KP_proc' : 'WSCOACK003_1318' : 'Attribute');
SUD05      Endif;

      *?   // Convert quantity to Broker Quantity
           WkOQty = *Zeros;
           Chain WkOISIZE FMSIZE;
           If %Found and SZSTAT = 'A';
              WkOQty = WkOrdQty * SZSALE;
           Else;
              WkOQty = WkOrdQty;
           Endif;

           If WkOQty = *Zeros;
             AddToXml('ConfirmedQty' : '0' : 'Attribute');
           Else;
             AddToXml('ConfirmedQty' : %Char(WkOQty) : 'Attribute');
           Endif;

           If WkOIDTRQ < OHDTRQ;
              WkDate = %Date(OHDTRQ:*MDY);
              WkRqDt = %Char(WkDate);
              AddToXml('ScheduledShipDate': WkRqDt:'Attribute');
           Else;
              WkDate = %Date(WkOIDTRQ:*MDY);
              WkRqDt = %Char(WkDate);
              AddToXml('ScheduledShipDate': WkRqDt :'Attribute');
           Endif;
           WkLin1 = %Int(WkLine);

SUD03 *?   // Check Broker name and Form the XML based on conditions
  |        If CHFRORID <> 'Gloeckner';
  |           Chain (PFromOrgID:CHBRKORID:CHSEQNO:CHORDNO:WkLin1) WSCODTLL1;
  |           If %Found;
  |              If CDFLAG = 'C' Or CDFLAG= 'P';
  |
  |   *?            // Move values from Xml File
  |                 AddToXml('BrokerLineItemNumber':%Char(CDBRKLNE):
  |                                                              'Attribute');
  |                 AddToXml('BrokerMaterialNumber':CDBRKMAT : 'Attribute');
SUD03               AddToXml('MaterialDescription' : CDVENDSC : 'Attribute');

      *?            // Check Item Authorization and Send Error Msg
VV07  * SUD07   //  Exsr CheckItemAuth;

VV07  *VV05         // Write error to FIORDRB2B1 file
  |   *         //  If Error <> 0;
  |   *         //     B2BORD# = CDORDNO;
  |   *         //     B2BSEQ# = CDORDLIN;
  |   *         //     B2BCMNT = ErrDesc;
  |   *         //     B2BTIME = %Timestamp();
  |   *         //     B2BUSER = CDUPDUSR;
  |   *         //     Write RIORDRB2BC;
VV07  *VV05     //  Endif;

VV05  *?            // Send latest comment from file FIORDRB2B1 in acknowledgement for order/line
  |                 WkLICmt = *Blanks;
  |                 Setll (CDORDNO:CDORDLIN) FIORDRB2B1;
  |                 Reade (CDORDNO:CDORDLIN) FIORDRB2B1;
  |                 If %Equal;
  |                    CDKPITMCM = B2BCMNT;
  |                    WkLICmt   = B2BCMNT;
  |                 Endif;
  |
  |   *?            // If comment found send, else blanks
VV05                AddToXml('LineItemComment' : WkLICmt : 'Attribute');
SUD03               AddToXml('CommittedInventoryPONumber':CDCOMINV:'Attribute');
  |
  |                 If WkOQty = *Zeros;
  |                    AddToXml('RejectionCode':RejectionCode_Cancel:                        //WJB
  |                                            'Attribute');                                 //WJB
  |                    AddToXml('LineItemStatus' : 'C' : 'Attribute'); //'C'=Cancel item     //WJB
  |                 Else;
  |                    AddToXml('RejectionCode':RejectionCode_Confirm:                       //WJB
SUD03                                                         'Attribute');
SUD05                  If CHFRORID = 'Eason';
  |                       AddToXml('LineItemStatus' : ' ' : 'Attribute');
  |                    Else;
  |                       AddToXml('LineItemStatus' : 'M' : 'Attribute');                    //WJB01
SUD05                  Endif;
SUD03               Endif;
  |
  |                 If CDORDQTY = *Zeros;
  |                    AddToXml('OrderdQty' : '0' : 'Attribute');
  |                 Else;
  |                    AddToXml('OrderdQty' : %Char(CDORDQTY) : 'Attribute');
  |                 Endif;
  |
  |   *?            // Only for Ball Seed
  |                 If CHFRORID = 'Ball Seed';
  |                    AddToXml('LineItemPrice' : %Char(CDLNITMPR):'Attribute');
  |                    AddToXml('UnitofMeasure' : WKOIUUOM : 'Attribute');
  |                    AddToXml('SubbedBrokerMaterial' : *Blanks : 'Attribute');
  |                 Endif;
  |                 AddToXml('VendorMaterialNumber' : CDVENMAT : 'Closetag');       // Close Tag
  |
  |   *?            // Update Flag in XML Order Detail File ("C" - Created)
  |                 If CDFlag = 'C';
  |                    CDFlag = 'P';
VV05                Endif;
SUD03               Exsr WSDtlAudit;

VV04  *?            // Update Error Description if any in KP Line Item Comment
  |                 Update WSCODTLR %Fields(CDFLAG:CDUPDDAT:CDUPDTIM:
VV04                                  CDUPDUSR:CDUPDJOB:CDUPDPGM:CDKPITMCM);
VV05                  //Endif;
SUD03            Endif;
  |
  |   *?      // If record not found in XML Detail File
  |           Else;
VV08  *?         // Call CL program to Get Error Msg
VV08             Monitor;
  |                 WkMsgf  = 'WSMSGF';
  |                 WkDta   = *Blanks;
  |                 WkMsgId = 'WS00095';
  |                 RtvErrMsg(WkMsgID:WkMsgf:WKMSG:WkDta);
  |                 On-Error;
VV08             EndMon;
  |
  |              AddToXml('BrokerLineItemNumber': *Blanks :'Attribute');
  |
  |   *?         // XREF to get Broker Material Id for new order lines
  |              WkItem = (%Trim(WkOIITEM) + %Trim(WkOISIZE));
  |              Chain (CHFRORID : 'Customer' :WkItem) XREFINVTL1;
  |              If %Found;
  |                 AddToXml('BrokerMaterialNumber' : XRFORKEY : 'Attribute');
  |                 AddToXml('MaterialDescription' : XRDESC : 'Attribute');
  |              Else;
  |                 AddToXml('BrokerMaterialNumber' : *Blanks : 'Attribute');
  |                 AddToXml('MaterialDescription' : *Blanks : 'Attribute');
  |              Endif;
  |              AddToXml('CommittedInventoryPONumber':CHBRKORID : 'Attribute');
  |              AddToXml('RejectionCode':RejectionCode_NewLine:'Attribute');          //WJB
  |              AddToXml('OrderdQty' : *Blanks : 'Attribute');
VV08  *      //  AddToXml('LineItemComment' : WkOIDES1 : 'Attribute');
VV08             AddToXml('LineItemComment' : WKMSG : 'Attribute');
  |
  |   *?         // Check the Line Already Acknowledged
  |              Chain (OHORD#:WkOILIST:WkOIITEM:WkOISIZE) WSERREXPL3;
SUD03            If %Found;
SUD05               If CHFRORID = 'Eason';
  |                    AddToXml('LineItemStatus' : ' ' : 'Attribute');  // ' ' =Existing Line
  |                 Else;
  |                    AddToXml('LineItemStatus' : 'M' : 'Attribute');  // 'M' =Existing Line
SUD05               Endif;
SUD03            Else;
  |                 If WkOQty = *Zeros;
  |                    AddToXml('LineItemStatus' : 'C' : 'Attribute');  // 'C' =Cancelled Line
  |                 Else;
  |                    AddToXml('LineItemStatus' : 'N' : 'Attribute');  // 'N' =New Line  WJB
  |                 Endif;
  |                 Exsr WrtExpInfo;
  |              Endif;
  |
  |   *?         // Only for Ball Seed
  |              If CHFRORID = 'Ball Seed';
  |                 AddToXml('LineItemPrice' : *Blanks : 'Attribute');
  |                 AddToXml('UnitofMeasure' : WkOIUUOM : 'Attribute');
  |                 AddToXml('SubbedBrokerMaterial' : *Blanks : 'Attribute');
  |              Endif;
  |              AddToXml('VendorMaterialNumber' : XRFORKEY : 'Closetag');          // Close Tag
  |           Endif;
  |        Else;
  |
  |   *?      // For Gloeckner Item part
  |           Exsr WrtGlrItem;
  |
  |        Endif;
  |
  |     Endsr;
  |   //--------------------------------------------------------------------
  |   *?                :-----------------------:
  |   *?                : WrtGlrItem Subroutine :
  |   *?                :-----------------------:
  |   *
  |   *?Logic : Subroutine to generate Item XML Part for Gloeckner
  |   *
  |     Begsr WrtGlrItem;
  |
  |   *?   // Check in XML file
  |        Chain (PFromOrgID:CHBRKORID:CHSEQNO:CHORDNO:WkLin1) WSCODTLL1;
  |        If %Found;
  |           If CDFLAG = 'C' Or CDFLAG= 'P';
  |
  |   *?         // Move values from Xml File
  |              AddToXml('BrokerLineItemNumber':%Char(CDBRKLNE):'Attribute');
  |              AddToXml('BrokerMaterialNumber':CDBRKMAT : 'Attribute');
SUD03            AddToXml('CommittedInventoryPONumber':CDCOMINV :'Attribute');

      *?         // Check Item Authorization and Send Error Msg
VV07  * SUD07 // Exsr CheckItemAuth;

VV07  *?VV05 //  // Write error to FIORDRB2B1 file
  |   *      //  If Error <> 0;
  |   *      //     B2BORD# = CDORDNO;
  |   *      //     B2BSEQ# = CDORDLIN;
  |   *      //     B2BCMNT = ErrDesc;
  |   *      //     B2BTIME = %Timestamp();
  |   *      //     B2BUSER = CDUPDUSR;
  |   *      //     Write RIORDRB2BC;
VV07  * VV05 // Endif;

VV05  *?         // Send latest comment from file FIORDRB2B1 in acknowledgement for order/line
  |              WkLICmt = *Blanks;
  |              Setll (CDORDNO:CDORDLIN) FIORDRB2B1;
  |              Reade (CDORDNO:CDORDLIN) FIORDRB2B1;
  |              If %Equal;
  |                 CDKPITMCM = B2BCMNT;
  |                 WkLICmt   = B2BCMNT;
  |              Endif;
  |
  |   *?         // If comment found send, else blanks
  |              AddToXml('LineItemComment' : WkLICmt : 'Attribute');
VV05
SUD03 *?         // Quantity Based Tags
  |              If WkOQty = *Zeros;                                                         //WJB
  |                 If CDORDQTY = *Zeros;
  |                    AddToXml('LineItemStatus' : 'C' : 'Attribute');
  |                    AddToXml('RejectionCode':RejectionCode_Cancel :
  |                                                  'Attribute');
  |                 Else;
  |                    AddToXml('RejectionCode':RejectionCode_CancelK:                       //WJB
  |                                            'Attribute');                                 //WJB
  |                    AddToXml('LineItemStatus' : 'C' : 'Attribute'); //'C'=Cancel item     //WJB
  |                 Endif;
  |              Else;                                                                       //WJB
  |                 If CDORDQTY <> WKOQty and WKOQty <> 0 and CDORDQTY <> 0;
  |                    AddToXml('LineItemStatus' : 'M' : 'Attribute');
  |                    AddToXml('RejectionCode':RejectionCode_Change:
  |                                                'Attribute');
  |                 Else;
  |                    If CDORDQTY = WKOQty;
  |                       AddToXml('LineItemStatus' : ' ' : 'Attribute');
  |                       AddToXml('RejectionCode':RejectionCode_Confirm :
  |                                                'Attribute');
  |                    Endif;
  |                 Endif;
  |              Endif;                                                                     //WJB
  |              If CDORDQTY = *Zeros;
  |                 AddToXml('OrderdQty' : '0' : 'Attribute');
  |              Else;
  |                 AddToXml('OrderdQty' : %Char(CDORDQTY) : 'Attribute');
  |              Endif;
  |
  |              AddToXml('VendorLineItemNumber' : %Char(CDVENLNE):'Attribute');
  |              AddToXml('TagRatio' : CDTAGRAT  :'Attribute');
  |              AddToXml('TagRatioDescription' : CDTAGRATD:'Attribute');
  |              AddToXml('TagRatioValue' : %Char(CDTAGRATV):'Attribute');
  |              AddToXml('MaterialDescription' : CDVENDSC : 'Attribute');
  |              AddToXml('VendorMaterialNumber' : CDVENMAT : 'Closetag');          // Close Tag
  |
  |   *?         // Update Flag in XML Order Detail File ("C" - Created)
  |              If CDFlag = 'C';
  |                 CDFlag = 'P';
VV05             Endif;
SUD03            Exsr WSDtlAudit;

VV04  *?            // Update Error Description if any in KP Line Item Comment
  |                 Update WSCODTLR %Fields(CDFLAG:CDUPDDAT:CDUPDTIM:
VV04                                CDUPDUSR:CDUPDJOB:CDUPDPGM:CDKPITMCM);
VV05                //Endif;
SUD03         Endif;
  |
  |   *?   // If record not found in XML Detail File
  |        Else;
VV08  *?   // Call CL program to Get Error Msg
VV08          Monitor;
  |              WkMsgf  = 'WSMSGF';
  |              WkDta   = *Blanks;
  |              WkMsgId = 'WS00095';
  |              RtvErrMsg(WkMsgID:WkMsgf:WKMSG:WkDta);
  |              On-Error;
VV08          EndMon;
  |
  |           AddToXml('BrokerLineItemNumber': *Blanks :'Attribute');
  |
  |   *?      // XREF to get Broker Material Id for new order lines
  |           WkItem = (%Trim(WkOIITEM) + %Trim(WkOISIZE));
  |           Chain (CHFRORID : 'Customer' :WkItem) XREFINVTL1;
  |           If %Found;
  |              AddToXml('BrokerMaterialNumber' : XRFORKEY : 'Attribute');
  |              AddToXml('MaterialDescription' : WkOIDES1 : 'Attribute');
  |           Else;
  |              AddToXml('BrokerMaterialNumber' : *Blanks : 'Attribute');
  |              AddToXml('MaterialDescription' : *Blanks : 'Attribute');
  |           Endif;
  |           AddToXml('CommittedInventoryPONumber':CHBRKORID : 'Attribute');
  |           AddToXml('RejectionCode':RejectionCode_NewLine:'Attribute');          //WJB
  |
  |           If WkOQty = *Zeros;
  |              AddToXml('OrderdQty' : '0' : 'Attribute');
  |           Else;
  |              AddToXml('OrderdQty' : %Char(WkOQty) : 'Attribute');
  |           Endif;
  |
  |   *?      // Check the Line Already Acknowledged
  |           Chain (OHORD#:WkOILIST:WkOIITEM:WkOISIZE) WSERREXPL3;
  |           If %Found;
  |              AddToXml('LineItemStatus' : ' ' : 'Attribute');     // ' ' =Existing Line
  |           Else;
  |              If WkOQty = *Zeros;
  |                 AddToXml('LineItemStatus' : 'C' : 'Attribute');  // 'C' =Cancelled Line
  |              Else;
  |                 AddToXml('LineItemStatus' : 'N' : 'Attribute');  // 'N' =New Line  WJB
  |              Endif;
  |              Exsr WrtExpInfo;
  |           Endif;
  |
  |           AddToXml('VendorLineItemNumber' : %Char(CDVENLNE) :
  |                                               'Attribute');
VV08  *   //  AddToXml('LineItemComment' : *Blanks : 'Attribute');
VV08          AddToXml('LineItemComment' : WKMSG : 'Attribute');
  |           AddToXml('TagRatio' : CDTAGRAT  :'Attribute');
  |           AddToXml('TagRatioDescription' : CDTAGRATD:'Attribute');
  |           AddToXml('TagRatioValue' : %Char(CDTAGRATV):'Attribute');
  |           AddToXml('VendorMaterialNumber' : XRFORKEY : 'Closetag');             // Close Tag
  |        Endif;
  |
  |     Endsr;
SUD03 //--------------------------------------------------------------------
      *?                :--------------------------:
      *?                : UnknownItemSR Subroutine :
      *?                :--------------------------:
      *
        Begsr UnknownItemSR;

      *?   // Call CL program to Get Error Msg
           Monitor;
             WkMsgf  = 'WSMSGF';
             WkDta   = *Blanks;
             WkMsgId = 'WS00049';
             RtvErrMsg(WkMsgID:WkMsgf:WKMSG:WkDta);
           On-Error;
           EndMon;

      *?   // Read Unknown Item Records from XML file
           Setll (PFromOrgID:CHBRKORID:CHSEQNO) WSCODTLL1;
           ReadE (PFromOrgID:CHBRKORID:CHSEQNO) WSCODTLL1;
           Dow not %Eof;
              If CDFLAG = 'U';

      *?         // Move values from Xml Order File
                 AddToXml('Item': *Blanks : 'Opentag');
SUD05            If PFromOrgId <> 'Eason';
  |                 AddToXml('KP_proc' : 'WSCOACK003_1318' : 'Attribute');
SUD05            Endif;
                 AddToXml('ConfirmedQty' : '0' : 'Attribute');
                 AddToXml('ScheduledShipDate': %Char(CDSCHSHDT):'Attribute');
                 AddToXml('BrokerLineItemNumber' : %Char(CDBRKLNE):'Attribute');
                 AddToXml('BrokerMaterialNumber' : CDBRKMAT : 'Attribute');
                 AddToXml('CommittedInventoryPONumber' : CDCOMINV :'Attribute');
                 AddToXml('MaterialDescription' : CDVENDSC : 'Attribute');
                 AddToXml('OrderdQty' : %Char(CDORDQTY) : 'Attribute');
                 AddToXml('LineItemComment' : WKMSG : 'Attribute');

                 If CHFRORID = 'Ball Seed';
                    AddToXml('LineItemPrice' : %Char(CDLNITMPR) : 'Attribute');
                    AddToXml('UnitofMeasure' : ' ' : 'Attribute');
                    AddToXml('SubbedBrokerMaterial' : *Blanks : 'Attribute');
                 Endif;
                 AddToXml('RejectionCode' :RejectionCode_Cancel: 'Attribute');         //WJB
                 AddToXml('LineItemStatus' : 'C'    : 'Attribute');                    //WJB
                 AddToXml('VendorMaterialNumber' : CDVENMAT : 'Closetag');

VV04  *?         // Update KP Line Item Comment in XML Order Detail File
  |              CDKPITMCM = WKMSG;
  |              Update WSCODTLR %Fields(CDUPDDAT:CDUPDTIM:
VV04                             CDUPDUSR:CDUPDJOB:CDUPDPGM:CDKPITMCM);
              Endif;

              ReadE (PFromOrgID:CHBRKORID:CHSEQNO) WSCODTLL1;
           Enddo;

        Endsr;
      //--------------------------------------------------------------------
VV03  *?                :--------------------------:
  |   *?                : DeletedItemSR Subroutine :
  |   *?                :--------------------------:
  |   *
  |     Begsr DeletedItemSR;
  |
  |   *?   // Call CL program to Get Error Msg
  |        Monitor;
  |          WkMsgf  = 'WSMSGF';
  |          WkDta   = *Blanks;
  |          WkMsgId = 'WS00088';
  |          RtvErrMsg(WkMsgID:WkMsgf:WKMSG:WkDta);
  |        On-Error;
  |        EndMon;
  |
  |   *?   // Read all Item Records from XML file
  |        Setll (PFromOrgID:CHBRKORID:CHSEQNO) WSCODTLL1;
  |        ReadE (PFromOrgID:CHBRKORID:CHSEQNO) WSCODTLL1;
  |        Dow not %Eof;
  |
  |   *?      // Do not check for unmapped Items again
  |           If CDFLAG <> 'U';
  |
  |   *?         // Check if line is deleted in FIORDR but found in XML file with OILIST
  |              WkLine = *Blanks;
  |              WkLine = %Char(CDORDLIN);
  |              Chain (CDORDNO:WkLine) FIORDRL15;
  |              If Not %Found();
  |
  |   *?            // Move values from Xml Order File
  |                 AddToXml('Item': *Blanks : 'Opentag');
SUD05               If PFromOrgId <> 'Eason';
  |                    AddToXml('KP_proc' : 'WSCOACK003_1318' : 'Attribute');
SUD05               Endif;
  |                 AddToXml('ConfirmedQty' : '0' : 'Attribute');
  |                 AddToXml('ScheduledShipDate': %Char(CDSCHSHDT):'Attribute');
  |                 AddToXml('BrokerLineItemNumber':%Char(CDBRKLNE)
  |                                                :'Attribute');
  |                 AddToXml('BrokerMaterialNumber':CDBRKMAT:'Attribute');
  |                 AddToXml('CommittedInventoryPONumber':CDCOMINV:'Attribute');
  |                 AddToXml('MaterialDescription' : CDVENDSC : 'Attribute');
  |                 AddToXml('OrderdQty' : %Char(CDORDQTY) : 'Attribute');
VV05                // AddToXml('LineItemComment' : WKMSG : 'Attribute');
  |
  |                 If CHFRORID = 'Ball Seed';
  |                    AddToXml('LineItemPrice':%Char(CDLNITMPR):'Attribute');
  |                    AddToXml('UnitofMeasure' : ' ' : 'Attribute');
  |                    AddToXml('SubbedBrokerMaterial' : *Blanks : 'Attribute');
  |                 Endif;
  |                 AddToXml('RejectionCode':RejectionCode_CancelK:'Attribute');         //WJB
  |                 AddToXml('LineItemStatus' : 'C'    : 'Attribute');                    //WJB
VV05                // AddToXml('VendorMaterialNumber' : CDVENMAT : 'Closetag');
SUD05
VV05  *?            // Write message to FIORDRB2B1 file
  |                 B2BORD# = CDORDNO;
  |                 B2BSEQ# = CDORDLIN;
  |                 B2BCMNT = WKMSG;
  |                 B2BTIME = %Timestamp();
  |                 B2BUSER = CDUPDUSR;
  |                 Write RIORDRB2BC;
  |
  |   *      ?      // Send latest comment from file FIORDRB2B1 in acknowledgement for order/line
  |                 WkLICmt = *Blanks;
  |                 Setll (CDORDNO:CDORDLIN) FIORDRB2B1;
  |                 Reade (CDORDNO:CDORDLIN) FIORDRB2B1;
  |                 If %Found;
  |                    CDKPITMCM = B2BCMNT;
  |                    WkLICmt   = B2BCMNT;
  |                 Endif;
  |                 AddToXml('LineItemComment' : WkLICmt : 'Attribute');
VV05                AddToXml('VendorMaterialNumber' : CDVENMAT : 'Closetag');

VV04                Update WSCODTLR %Fields(CDUPDDAT:CDUPDTIM:
VV04                                CDUPDUSR:CDUPDJOB:CDUPDPGM:CDKPITMCM);
                 Endif;
VV03          Endif;
  |           ReadE (PFromOrgID:CHBRKORID:CHSEQNO) WSCODTLL1;
  |        Enddo;
  |
VV03    Endsr;
      //--------------------------------------------------------------------
SUD07 *?                :--------------------------:
  |   *?                : CheckItemAuth Subroutine :
  |   *?                :--------------------------:
  |   *
  |   *?Logic : Check Item Authorization for Item and Broker
  |   *?
  |     Begsr CheckItemAuth;
  |
  |   *?   // Check Item Authorization for Item and Broker
  |        If CHFRORID = 'Ball Seed';
  |           ThisType = 'Ball Seed';
  |        Else;
  |           ThisType = 'WEB';
  |        Endif;
  |
  |   *?   // Call Inventory Availability Status Program
  |        Error   = *Zeros;
  |        ErrDesc = *Blanks;
  |        RqToday = CHRQSHDT;                         // Today MDY
  |        If WkOQty = *Zeros;
  |           INVAVLSTS(WkOIITEM:WkOISIZE:RqToday:
  |                     ThisType:Error:ErrDesc);
VV05          //If Error <> 0;
  |           //   AddToXml('LineItemComment' : ErrDesc : 'Attribute');
  |           //Endif;
  |        Endif;
  |
  |        //If Error = 0;
  |        //   AddToXml('LineItemComment' : CDLNITMCM : 'Attribute');                   // WJB
VV05       //Endif;
  |
  |     Endsr;
SUD07 //--------------------------------------------------------------------
      *?                :-----------------------:
      *?                : WrtExpInfo Subroutine :
      *?                :-----------------------:
      *
        Begsr WrtExpInfo;

      *?   // Clear record
           Clear WSERREXPR;

      *?   // Move Valeus into Exception file fields
           ERBRKNAM  = PFromOrgId;
           ERBRKORID = PCustPO;
           ERPOSEQ   = PSeqNo;
           ERRQSPDT  = %Date(OHDTRQ:*MDY);
           ERORDNO   = OHORD#;
           ERORDLIN  = WkOILIST;
           ERITMNUM  = WkOIITEM;
           ERITMSIZ  = WkOISIZE;
           ERQTYORD  = WkOQty;
           ERRMSG    = 'Record added manually in FIORDR';
           ERFLAG    = 'I';
           ERCRTDAT  = Rundate;
           ERCRTTIM  = Runtime;
           ERCRTUSR  = User;
           ERCRTJOB  = Job;
           ERCRTPGM  = Pgm;

      *?   // Write record
           Write WSERREXPR;

        Endsr;
      //--------------------------------------------------------------------
      *?            :-----------------------:
      *?            : WSHdrAudit Subroutine :
      *?            :-----------------------:
      *
      *?Logic : Move values into Audit Fields
      *?
        Begsr WSHdrAudit;

      *?   // Audit Stamp
           CHUPDDAT = Rundate;
           CHUPDTIM = Runtime;
           CHUPDUSR = User;
           CHUPDJOB = Job;
           CHUPDPGM = Pgm;

        Endsr;
      //--------------------------------------------------------------------
      *?            :-----------------------:
      *?            : WSDtlAudit Subroutine :
      *?            :-----------------------:
      *
      *?Logic : Move values into Audit Fields
      *?
        Begsr WSDtlAudit;

      *?   // Audit Stamp
           CDUPDDAT = Rundate;
           CDUPDTIM = Runtime;
           CDUPDUSR = User;
           CDUPDJOB = Job;
           CDUPDPGM = Pgm;

        Endsr;
SUD03 //--------------------------------------------------------------------
  |   *?                :--------------------:
  |   *?                : CallCmd Subroutine :
  |   *?                :--------------------:
  |   *
  |     Begsr CallCmd;
  |
  |   *?   // Call QCMDEXC ,Monitor if there is a error
  |        Monitor;
  |           QCmdExc(%Trim(Cmd): %Len(%Trim(Cmd)));
  |        On-Error;
  |        EndMon;
  |
SUD03   Endsr;
      //--------------------------------------------------------------------
      *?                :-------------------------:
      *?                : RejectionCode Procedure :
      *?                :-------------------------:
      *
        Dcl-Proc  RejectionCode ;
           Dcl-Pi RejectionCode Char(4);
             WkBroker  Char(20) Value;
             RejectionType  Char(30) Value;
           End-Pi;

      *?   // Get Rejection Code from FBROKDFT file  based on Quantity
           WkReject = *Blanks;
           Chain (WkBroker : RejectionType) FBrokDftL0;
           If %Found;
              WkReject = %Trim(DFVARVAL);
           Endif;
           Return WkReject;

        End-Proc;
      //--------------------------------------------------------------------
      *?                :--------------------:
      *?                : AddToXml Procedure :
      *?                :--------------------:
      *
      *?Logic   : AddToXml to generate XML Acknowledgement
      *?          Field by field process
      *?Example : Starttag : <Tagname>
      *?          Opentag  : <Tagname
      *?          Closetag :  Tagname/>
      *?          Close    :  Tagname>
      *?          Endtag   : </Tagname>
      *
        Dcl-Proc  AddToXml;
           Dcl-Pi AddToXml;
              Tagname      Char(50)  Value;
              Tagvalue     Char(300) Value;
              Info         Char(10)  Value;
           End-Pi;

SUD02 *?   // Replace Special Characters
  |        If TagValue <> *Blanks;
  |           TagValue = %ScanRpl('&': '&amp;': TagValue);
  |           TagValue = %ScanRpl('''': '&apos;' : TagValue);
  |           TagValue = %ScanRpl('"': '&quot;' : TagValue);
SUD02      Endif;

      *?   // Check Info to add XML tag
           Select;

              When Info = 'Starttag';
                 Xml = %Trimr(Xml) + '<' + %Trim(Tagname)
                                 + %Trim(Tagvalue)  + '>';

              When Info = 'Opentag';
                 Xml = %Trimr(Xml) + ' ' + '<' + %Trim(Tagname) ;

              When Info = 'Attribute';
                 Xml = %Trimr(Xml) + ' ' + %Trim(Tagname) + '="'
                                 + %Trim(Tagvalue) + '" ';

              When Info = 'Closetag';
                 Xml = %Trimr(Xml) + ' ' + %Trim(Tagname) + '="'
                                   + %Trim(Tagvalue) + '"' + ' />';

              When Info = 'Close';
                 Xml = %Trimr(Xml) + ' ' + %Trim(Tagname) + '="'
                                   + %Trim(Tagvalue) + '"' + ' >';

              When Info = 'Endtag';
                 Xml = %Trimr(Xml) + ' </' + %Trim(Tagname) + '>';

           Endsl;

      *?   // Write XML Line into IFS
           Exsr WriteIFS;
      *
      //--------------------------------------------------------------------
      *?            :---------------------:
      *?            : WriteIFS Subroutine :
      *?            :---------------------:
      *
      *?Logic : Write Each tag as a Record into Flat File
      *?
        Begsr WriteIFS;

      *?   // Check Info to add XML tag
           Select;

              When Info = 'Starttag';
                 XmlIfs =  '<' + %Trim(Tagname)
                                 + %Trim(Tagvalue)  + '>';

              When Info = 'Opentag';
                 XmlIfs =  '<' + %Trim(Tagname) ;

              When Info = 'Attribute';
                 XmlIfs =  %Trim(Tagname) + '="'
                                 + %Trim(Tagvalue) + '" ';

              When Info = 'Closetag';
                 XmlIfs =  %Trim(Tagname) + '="'
                                   + %Trim(Tagvalue) + '"' + ' />';

              When Info = 'Close';
                 XmlIfs =  %Trim(Tagname) + '="'
                                   + %Trim(Tagvalue) + '"' + ' >';

              When Info = 'Endtag';
                 XmlIfs = ' </' + %Trim(Tagname) + '>';

           Endsl;

      *?   // Insert into Flat File
           Exec Sql
           INSERT INTO IFSXML Values(Trim(:XMLIFS));

        Endsr;

        End-Proc;
      *?------------- End of Program ----------------------------------
