      *? Program        : WSPSTACKMC
      *?
      *? Description    : This program to Generate and POST Acknowledgement XML
      *?                  for Michell Order Create & Change Order
      *? Created By     : S.Uthayadurga
      *?
      *? Date           : 04 May 2018
      //--------------------------------------------------------------------
      *? Special Notes  :** PO & CO XML will be Generated based on Process Flag
      *?                :   (PrFlag)
      *?                :** Write XML data into IFS stream file
      *
      *? Called Program : WSPOSTXML - WS - POST XML to Client Site
      *?                  INVAVLSTS - Inventory Availability Status
      *
      *? Response       : Status for Michell
      //--------------------------------------------------------------------
      *?                :---------------:
      *?                : Modifications :
      *?                :---------------:
      * ------  --------   ----------   ------------------------------------
      * MOD#    MOD Date   Programmer   Description
      * ------  --------   ----------   ------------------------------------
      *?Change Request Before Live
      *         11/12/18   S.Uthaya     For Not Authorized Item, Send Error Msg
      *                                 into LineItemComment
      *         11/29/18   Vimala V     Include logic to send line for Items
      *                                 deleted manually (not 'D' status record)
      *                                 in FIORDR but found in XML files
      *         12/06/18   Vimala V     Populate Error Description returned by
      *                                 INVAVLSTS program in field KP LineItemComment
      *                                 or any error/msg generated by KubePak
      *         12/19/18   Vimala V     Write Error Description returned by
      *                                 INVAVLSTS program to file FIORDRB2B1 and send
      *                                 the lastest comment based on timestamp
      *                                 from FIORDRB2B1 file in KP LineItemComment
      *         08/01/19   Vimala V     Delete Order from file AUTOACKPF after sending
      *                                 Acknowledgement to Brokers
      *         01/30/19   Vimala V     Do not call INVAVLSTS and write comment in
      *                                 FIORDRB2B1 - Take latest record to send in Ack
      *         02/13/19   Vimala V     If Orderline from FIORDR not found in xml, send
      *                                 message instead of Item Description in LineItemComment
      *         06/19/19   S.Uthaya     Status value changed & removed unwanted
      *                                 Status values
      *         08/14/19   S.Uthaya     Status value Added for New line added by KubePak
      *?Change Request After Live
      //--------------------------------------------------------------------
      *?                :----------------------:
      *?                : Header Specification :
      *?                :----------------------:
      *
        Ctl-Opt DftActGrp(*NO) Option(*NoDebugIO)
           ActGrp ('HTTP') BndDir('QC2LE');
      //--------------------------------------------------------------------
      *?                :--------------------:
      *?                : File Specification :
      *?                :--------------------:
      *
      *?File: WS - XML Order Create Header Logical
      *?Key : From Org ID:Header Seq No:Detail Seq No
        Dcl-F WSPOHDRL2  Disk(*Ext) Keyed Usage(*Update:*Output);
      *
      *?File: WS - Xml Order Create Detail Logical File
      *?Key : From Org ID:Customer PO:Header Seq No:Order No:Order Line No
        Dcl-F WSPODTLL1  Disk(*Ext) Keyed Usage(*Update:*Output);
      *
      *?File: WS - Xml Order Change Header Logical File
      *?Key : From Org ID:Header Seq No:Detail Seq No
        Dcl-F WSCOHDRL2  Disk(*Ext) Keyed Usage(*Update:*Output);
      *
      *?File: WS - Xml Order Change Detail Logical File
      *?Key : From Org ID:Customer PO:Header Seq No:Order Seq #:Order Line #
        Dcl-F WSCODTLL1  Disk(*Ext) Keyed Usage(*Update:*Output);
      *
      *?File: Order Header Record
      *?Key : Order Number
        Dcl-F FHORDR     Disk(*Ext) Keyed Usage(*Input);
      *
      *?File: WS - Broker Defaults and Control Logical File
      *?Key : Broker Number:Broker Variable
        Dcl-F FBROKDFTL0 Disk(*Ext) Keyed Usage(*Input);
      *
      *?File: Size Code Master File
      *?Key : Size Code
        Dcl-F FMSIZE     Disk(*Ext) Keyed Usage(*Input);
      *
      *?File: Customer Master File
      *?Key : Customer Code
        Dcl-F FMCUST     Disk(*Ext) Keyed Usage(*Input);
      *
      *?File: Item Cross Reference  Logical File
      *?Key : Provided Name:Provided Type:Local Key
        Dcl-F XREFINVTL1 Disk(*Ext) Keyed Usage(*Input);
        Dcl-F XREFINVTL0 Disk(*Ext) Keyed Usage(*Input) Rename(XRECINVT:Rec1)
                                               Prefix(I);
      *?File: Order Detail Record
      *?Key : Status:Order Number:Order Seq No
        Dcl-F FIORDRL15  Disk(*Ext) Keyed Usage(*Input);
      *
      *?File: Order Detail Partial Item Record
      *?Key : Order Number:List Code
        Dcl-F FIORDRPART Disk(*Ext) Keyed Usage(*Input) Prefix(H);
      *
      *?File: Xml Order Error Exception File
      *?Key : OrderNO:OrderLine:Item:Item Size
        Dcl-F WSERREXPL3 Disk(*Ext) Keyed Usage(*Update:*Output);

      *?File: Ship Via Cross Reference for Outbound
      *?Key : Provided by Name:Type:Local Key
        Dcl-F XREFSVIOL0 Disk(*Ext) Keyed Usage(*Input);
      *
      *?File: Order Detail B2B Coments
      *?Key : Order Number: Order Line:TimeStamp(D)
        Dcl-F FIORDRB2B1 Disk(*Ext) Keyed Usage(*Input:*Output);
      //--------------------------------------------------------------------
      *?                :--------------------:
      *?                : Data Specification :
      *?                :--------------------:
      *
      *?Procedure Interface Declaration : *Entry
        Dcl-Pi WSPSTACKMC;
           PFromOrgID   Like(PHFRORID);
           PBrokOrId    Like(PHBRKORID);
           POrderNo     Like(PHORDNO);
        End-Pi;
      *
      *?Procedure Prototype Declaration : To POST XML to Client Site
        Dcl-Pr WSPOSTXML  Extpgm;
           PBrkAck    Char(1000000) Options(*Varsize);
           PFromOrgId Char(30);
           PFlag      Char(1);
           HttpStatus Int(10:0);
        End-Pr;
      *
      *?Procedure Prototype Declaration : Email Acknowledgement
        Dcl-Pr WSEMLACKB  Extpgm;
           POrderNo     Like(PHORDNO);
        End-Pr;
      *
      *?Procedure Prototype Declaration : AddXml Part
        Dcl-Pr AddToXml;
           Tagname      Char(50)    Value;
           Tagval       Char(300)   Value;
           Info         Char(10)    Value;
        End-Pr;
      *
      *?Procedure Prototype Declaration : Pgm to Call Command
        Dcl-Pr QCMDEXC Extpgm;
           Cmd Char(2000)   Const Options(*Varsize);
           Len Packed(15:5) Const;
        End-Pr;
      *
      *?Procedure Prototype Declaration : Check on the Inventory availability status
        Dcl-Pr INVAVLSTS Extpgm;                   // Rpg Program
           Item          Char(12);                 // Item
           Size          Char(3);                  // Size
           ThisDate      Date(*Usa);               // Ready Date
           ThisType      Char(10);                 // Plug-View-Type
           ErrorNumber   Zoned(1:0);               // Error
           ErrDesc       Char(10);                 // Error Description
        End-Pr;
      *
      *?Procedure Prototype Declaration : Call CL program to Retreive MSG
        Dcl-Pr RtvErrMsg Extpgm('WSRTVMSG');            // CL Program
           WkMsgId  Char(7);                            // Msg Id
           WkMsgF   Char(10);                           // Msg File
           WKMsg    Char(132);                          // Msg
           WkDta    Char(10);                           // Msg Data
        End-Pr;
      *
      *?Program Status Data Structure   :
        Dcl-Ds Pgmstatus PSDS;
           Job     Char(10) Pos(244);
           User    Char(10) Pos(254);
           Rundate Zoned(6) Pos(276);
           Runtime Zoned(6) Pos(282);
           Pgm     Char(10) Pos(334);
        End-Ds;
      *
      *?Data Structure for SQL (Order Create):
        Dcl-Ds WSPOHDRL2DS ExtName('WSPOHDRL2');
        End-Ds;
      *
      *?Data Structure for SQL (Change Order):
        Dcl-Ds WSCOHDRL2DS ExtName('WSCOHDRL2');
        End-Ds;
      *
      *?Global Variable Declaration     :
        Dcl-S Xml        Char(1000000) Inz;
        Dcl-S Cmd        Char(2000)    Inz;
        Dcl-S XmlIfs     Char(300)     Inz;
        Dcl-S Info       Char(10)      Inz;
        Dcl-S ThisType   Char(10)      Inz;           // Plug-View-Type
        Dcl-S ErrDesc    Char(40)      Inz;           // Error Description
        Dcl-S Error      Zoned(1:0)    Inz;           // Error
        Dcl-S RqToday    Date(*Usa)    Inz;           // Requested ShipDate
        Dcl-S Httpstatus Int(10:0)     Inz;
      *
      *?Work Variable Declaration :
        Dcl-S WkLineItemNo Packed(6)   Inz;
        Dcl-S WkOrder      Packed(6)   Inz;
        Dcl-S WkOrdLin     Packed(3)   Inz;
        Dcl-S WkSeqNo      Packed(9)   Inz;
        Dcl-S WkCrtDat     Packed(7)   Inz;
        Dcl-S WkCrtTim     Packed(6)   Inz;
        Dcl-S WkOrdQty     Zoned(11:2) Inz;
        Dcl-S WkLin1       Zoned(4:0)  Inz;
        Dcl-S WkOQty1      Zoned(11)   Inz;
        Dcl-S WkOQty       Zoned(11)   Inz;           // Used for Qty Conversion
        Dcl-S WkOILIST     Zoned(3)    Inz;
        Dcl-S WkOISEQ#     Zoned(3)    Inz;
        Dcl-S WkOIDTRQ     Zoned(6)    Inz;
        Dcl-S WkMsg        Char(132)   Inz;           // Used for Msg File
        Dcl-S WkDta        Char(10)    Inz;           // Used for Msg File
        Dcl-S WkPath       Char(75)    Inz;
        Dcl-S WkFile       Char(75)    Inz;
        Dcl-S WkDtTm       Char(19)    Inz;
        Dcl-S WkItem       Char(15)    Inz;
        Dcl-S WkRqdt       Char(10)    Inz;
        Dcl-S WkBroker     Char(20)    Inz;
        Dcl-S WkBrkItem    Char(18)    Inz;
        Dcl-S WkItem1      Char(12)    Inz;
        Dcl-S WkFrmOrgId   Char(30)    Inz;
        Dcl-S WkOIITEM     Char(12)    Inz;
        Dcl-S WkOIDES1     Char(30)    Inz;
        Dcl-S WkMsgf       Char(10)    Inz;           // Used for Msg File
        Dcl-S WkLICmt      Char(50)    Inz;
        Dcl-S WkMsgId      Char(7)     Inz;           // Used for Msg File
        Dcl-S WkStatus     Char(4)     Inz;
        Dcl-S WkOIUUOM     Char(2)     Inz;
        Dcl-S WkLine       Char(4)     Inz;
        Dcl-S WkFlag       Char(1)     Inz;
        Dcl-S WkOISIZE     Char(3)     Inz;
        Dcl-S WkOIITYP     Char(1)     Inz;
        Dcl-S WkDate       Date(*ISO)  Inz;
      *
      *?Parameter Variable Declaration :
        Dcl-S PBrkAck      Char(1000000);
        Dcl-S PrFlag       Char(2)  Inz;
        Dcl-S PFlag        Char(1)  Inz;
      *
      *?Status Codes Declaration :
        Dcl-S Status_Cancel   Char(4) Inz;
        Dcl-S Status_Confirm  Char(4) Inz;
        Dcl-S Status_NewLine  Char(4) Inz;
      //--------------------------------------------------------------------
      *?                :------------------:
      *?                : Calculation Spec :
      *?                :------------------:
      *
      *?Main Line :

      *?   // Initialise
           Exsr InzPgm;

      *?   // Main Process
           Exsr MainPgm;

      *?   // End Program
           Exsr EndPgm;

      //--------------------------------------------------------------------
      *?                :-----------------------:
      *?                : Initialise Subroutine :
      *?                :-----------------------:
      *
        Begsr InzPgm;

      *?   // Clear XML
           Clear PBrkAck;

      *?   // Get Date and Time
           WkDtTm = %Char(%Date) + 'T' + %Char(%Time());

      *?   // Get Broker
           Chain ('1000': PFromOrgId) FBrokDftL0;
           If %Found;
              WkBroker = %Trim(DFVARVAL);
           Endif;

      *?   // Check PO Or CO Acknowledgement
           Exsr Process;

      *?   // Get Status from Broker Default File
           Status_Cancel  = Status(WkBroker :'Status_Cancel');
           Status_Confirm = Status(WkBroker :'Status_Confirm');
           Status_NewLine = Status(WkBroker :'Status_New');

        Endsr;
      //--------------------------------------------------------------------
      *?                :--------------------:
      *?                : Process Subroutine :
      *?                :--------------------:
      *
      *?Logic : Check record exists in Change Order file , If not found
      *?        Check record exists in Order Create file
      *?        and the process flag should be 'C'/'P'
      *?      : Based on File call the Acknowledgement program
      *
        Begsr Process;

      *?   // Check Record Exists with Flag "C" or "P" and Process
           Exec SQL
              DECLARE  C2 cursor for
              Select  * from WSCOHDRL2
              where  (CHFLAG='C' or CHFLAG='P') AND CHFRORID = :PFromOrgID
              AND CHBRKORID = :PBrokOrId AND CHORDNO = :POrderNo
              ORDER BY CHFRORID, CHBRKORID, CHORDNO,
                       CHCRTDAT desc, CHCRTTIM desc
              Fetch first Row Only;

      *?   // Open the SQL Cursor
           Exec sql Open C2;
           If SqlCode = -502;
              Exec Sql Close C2;
              Exec Sql Open C2;
           Endif;

      *?   // Read the SQL recordset
           Exec Sql Fetch C2 Into :WSCOHDRL2DS;
           If SQLCODE = 100;

      *?      // Order not found message
              Httpstatus = 400;
           Else;
              If CHFLAG = 'C' Or CHFLAG = 'P';
                 WkCrtDat = CHCRTDAT;
                 WkCrtTim = CHCRTTIM;
                 PrFlag = 'CO';
              Endif;
           Endif;

           If PrFlag = *Blanks;

      *?      // Check Record Exists with Flag "C" or "P" and Process
              Exec SQL
                 DECLARE  C1 cursor for
                 Select   * from WSPOHDRL2
                 Where (PHFLAG='C' or PHFLAG='P') AND PHFRORID = :PFromOrgID
                 AND PHBRKORID = :PBrokOrId AND PHORDNO = :POrderNo
                 ORDER BY PHFRORID, PHBRKORID, PHORDNO,
                          PHCRTDAT desc, PHCRTTIM Desc
                 Fetch first Row Only;

      *?      // Open the SQL Cursor
              Exec Sql Open C1;
              If SqlCode = -502;
                 Exec Sql Close C1;
                 Exec Sql Open C1;
              Endif;

      *?      // Read the SQL
              Exec Sql Fetch C1 Into :WSPOHDRL2Ds;
              If SQLCODE = 100;

      *?         // Order not found message
                 Httpstatus = 400;
              Else;
                 If PHFLAG = 'C' Or PHFLAG = 'P';
                    WkCrtDat = PHCRTDAT;
                    WkCrtTim = PHCRTTIM;
                    PrFlag = 'PO';
                 Endif;
              Endif;
           Endif;

        Endsr;
      //--------------------------------------------------------------------
      *?                :--------------------:
      *?                : MainPgm Subroutine :
      *?                :--------------------:
      *
        Begsr MainPgm;

      *?   // Create IFSXML temp file in QTEMP
           Exec SQL Create Or Replace Table QTEMP.IFSXML (IFSXML VARCHAR(300));
           Exec SQL Delete from Qtemp.IFSXML;

      *?   // Excute Process based on the flag
           If PrFlag = 'PO';
              Exsr ProcessPO;                 // Create Order Process
           Elseif PrFlag = 'CO';
              Exsr ProcessCO;                 // Change Order Process
           Endif;

      *?   // Post XML
           Exsr PostXml;

           // Email to Miochell
           WSEMLACKB(POrderNo);

      *?   // Write into IFSXML File (Future Reference)
           Exsr CreateIfs;

        Endsr;
      //--------------------------------------------------------------------
      *?                :-------------------:
      *?                : Endpgm Subroutine :
      *?                :-------------------:
      *
        Begsr EndPgm;

      *?   // Return
           *InLr = *On;
           Return;

        Endsr;
      //--------------------------------------------------------------------
      *?                :--------------------:
      *?                : PostXml Subroutine :
      *?                :--------------------:
      *
        Begsr PostXml;

      *?   // Post XML
           If PBrkAck <> *Blanks;
              PFlag = 'A';
              WSPOSTXML(PBrkAck:PFromOrgId:PFlag:HttpStatus);
              PBrkAck = 'Order ' + %Char(OHORD#) + ' Created and '   +
                        'Acknowledgement sent successfully for PO: ' +
                        PBrokOrId;
      *?      // Delete Order from file AUTOACKPF - Only change order
              If PrFlag = 'CO';
                 Exec Sql
                    Delete from AUTOACKPF where AAORD# = :OHORD#;
              Endif;

           Endif;

        Endsr;
      //--------------------------------------------------------------------
      *?                :----------------------:
      *?                : CreateIfs Subroutine :
      *?                :----------------------:
      *
        Begsr CreateIfs;

      *?   // Create stream file
           Chain ('IFS' : 'IFSPATH' ) FBROKDFTL0;
           If %Found;
              WkPath = %Trim(DFVARVAL);
           Endif;

           WkFile = 'PO-' + %Trim(PBrokOrId) + '_ORD#-' + %Char(POrderNo)
                          + '_' + %Char(%Timestamp()) + '.xml';
           Cmd = 'CPYTOIMPF FROMFILE(IFSXML) STMFCODPAG(1208)'
               + ' TOSTMF(''' + %Trim(WkPath) + %Trim(WkFile) + ''')'
               + ' MBROPT(*REPLACE) RCDDLM(*CRLF) DTAFMT(*DLM)'
               + ' STRDLM(*NONE) RMVBLANK(*TRAILING)';
           Exsr CallCmd;

      *?   // Clear Flat File
           Cmd  = 'CLRPFM FILE(QTEMP/IFSXML)';
           Exsr CallCmd;

        Endsr;
      //--------------------------------------------------------------------
      *?                :--------------------:
      *?                : CallCmd Subroutine :
      *?                :--------------------:
      *
        Begsr CallCmd;

      *?   // Call CL program to run Command
           Monitor;
             QCmdExc(%Trim(Cmd): %Len(%Trim(Cmd)));
           On-Error;
           EndMon;

        Endsr;
      //--------------------------------------------------------------------
      *?                :----------------------:
      *?                : ProcessPO Subroutine :
      *?                :----------------------:
      *
        Begsr ProcessPO;

      *?   // Start Tag
           AddToXml('BrokerAcknowledgement_V2' : *Blanks : 'Starttag');

      *?   // XML Body
           Exsr IdentificationSR;
           Exsr OrderHeaderSR;
           Exsr OrderDetailSR;

      *?   // Update Process Flag Processed with Audit Stamp
           Chain (PFromOrgID:PBrokOrId:POrderNo:WkCrtDat:WkCrtTim)
                                     WSPOHDRL2;
           If %Found(WSPOHDRL2);
              PHFLAG = 'P';
              Exsr WSHdrAudit;
              Update WSPOHDRR %Fields(PHFLAG:PHUPDDAT:PHUPDTIM
                                      :PHUPDUSR:PHUPDJOB:PHUPDPGM);
           Endif;

      *?   // End Tag
           AddToXml('BrokerAcknowledgement_V2' : *Blanks : 'Endtag');

      *?   // Return Xml
           PBrkack = Xml;

        Endsr;
      //--------------------------------------------------------------------
      *?                :----------------------:
      *?                : ProcessCO Subroutine :
      *?                :----------------------:
      *
        Begsr ProcessCO;

      *?   // Start Tag
           AddToXml('BrokerAcknowledgement_V2' : *Blanks : 'Starttag');

      *?   // XML Body
           Exsr IdentificationSR;
           Exsr OrderHeaderSR;
           Exsr OrderDetailSR;

      *?   // Update Process Flag Processed with Audit Stamp
           Chain (PFromOrgID:PBrokOrId:POrderNo:WkCrtDat:WkCrtTim)
                           WSCOHDRL2;
           If %Found;
              CHFLAG = 'P';
              Exsr WSHdrAuditCo;
              Update WSCOHDRR %Fields(CHFLAG:CHUPDDAT:CHUPDTIM
                                      :CHUPDUSR:CHUPDJOB:CHUPDPGM);
           Endif;

      *?   // End Tag
           AddToXml('BrokerAcknowledgement_V2' : *Blanks : 'Endtag');

      *?   // Return Xml
           PBrkack = Xml;

        Endsr;
      //--------------------------------------------------------------------
      *?                :-----------------------------:
      *?                : IdentificationSR Subroutine :
      *?                :-----------------------------:
      *
        Begsr IdentificationSR;

      *?   // Move values into Identification Part
           AddToXml('Identification' : *Blanks : 'Opentag');
           AddToXml('MessageProtocol_ID' : 'BrokerAcknowledgement_V2'
                                          :'Attribute');

      *?   // Move values into FromOrgId/SenderOrgId from Parameter File
           Chain ('1000' : PFromOrgID) FBrokDftL0;
           If %Found;
              WkBroker =  %Trim(DFVARVAL);
           Endif;
           Chain (WkBroker:'FromOrgId') FBrokDftL0;
           If %Found;
              AddToXml('FromOrg_ID' : %Trim(DFVARVAL): 'Attribute');
              AddToXml('SenderOrg_ID': %Trim(DFVARVAL): 'Attribute');
           Endif;

      *?   // Move values into ToOrgId from Parameter File
           Chain (WkBroker:'ToOrgId') FBrokDftL0;
           If %Found;
              AddToXml('ToOrg_ID' : %Trim(DFVARVAL): 'Attribute');
           Endif;

           AddToXml('Date' : WkDtTm : 'Closetag');

        Endsr;
      //--------------------------------------------------------------------
      *?                :--------------------------:
      *?                : OrderHeaderSR Subroutine :
      *?                :--------------------------:
      *
        Begsr OrderHeaderSR;

      *?   // Move values into OrderHeader Part
           AddToXml('OrderHeader' : *Blanks : 'Opentag');

      *?   // Move Acknowledgement and Order ID
           Chain POrderNo FHORDR;
           If %Found;
              AddToXml('Vendor_Order_ID' : %Char(OHORD#) : 'Attribute');
           Endif;

      *?   // Move values from WSPOHDRPF (If Order Create)
           If PrFlag = 'PO';
              AddToXml('AirportCode' : PHAIRCDE : 'Attribute');
              AddToXml('BackOrderOK' : PHBKOROK : 'Attribute');
              AddToXml('Broker_Order_ID' : PHBRKORID : 'Attribute');
              AddToXml('FreightPaymentMethod' : PHFREMTH : 'Attribute');
              AddToXml('Order_Instructions' : PHSHPINS : 'Attribute');
              AddToXml('Requested_Ship_Date' : %Char(PHRQSHDT) : 'Attribute');
              AddToXml('Order_Date' : %Char(PHORDDAT) : 'Attribute');
              AddToXml('Vendor_Customer_ID' : PHVENCUSID : 'Attribute');
              AddToXml('Vendor_Status' : PHFlag : 'Attribute');

      *?      // Get Ship Method from XREFSVIO file
              Chain (PHFRORID :'Customer' : OHSHPC) XREFSVIOL0;
              If %Found;
                 AddToXml('ShipMethod_Code' : XRFORKEY : 'Attribute');
              Endif;
              AddToXml('SubstitutionOK' : PHSUBSOK : 'Close');

      *?   // Move values from WSCOHDRPF (If Change Order)
           Elseif PrFlag = 'CO';
              AddToXml('AirportCode' : CHAIRCDE : 'Attribute');
              AddToXml('BackOrderOK' : CHBKOROK : 'Attribute');
              AddToXml('Broker_Order_ID' : CHBRKORID : 'Attribute');
              AddToXml('FreightPaymentMethod' : CHFREMTH : 'Attribute');
              AddToXml('Order_Instructions' : CHSHPINS : 'Attribute');
              AddToXml('Requested_Ship_Date' : %Char(CHRQSHDT) : 'Attribute');
              AddToXml('Order_Date' : %Char(CHORDDAT) : 'Attribute');
              AddToXml('Vendor_Customer_ID' : CHVENCUSID : 'Attribute');
              AddToXml('Vendor_Status' : CHFlag : 'Attribute');

      *?      // Get Ship Method from XREFSVIO file
              Chain (CHFRORID :'Customer' : OHSHPC) XREFSVIOL0;
              If %Found;
                 AddToXml('ShipMethod_Code' : XRFORKEY : 'Attribute');
              Endif;
              AddToXml('SubstitutionOK' : CHSUBSOK : 'Close');
           Endif;

           Exsr ShipToSR;
           Exsr SoldToSR;

           AddToXml('OrderHeader' : *Blanks : 'Endtag');

        Endsr;
      //--------------------------------------------------------------------
      *?                :-------------------:
      *?                : SoldTo Subroutine :
      *?                :-------------------:
      *
        Begsr SoldToSR;

      *?   // Check Record in Order Header File
           Chain POrderNo FHORDR;
           If %Found;

      *?      // Move values into SoldTo tags from Order File
              AddToXml('SoldTo' : *Blanks : 'Opentag');
              AddToXml('Name' : OHSLD1 : 'Attribute');
              AddToXml('Address_Line1' : OHSLD2 : 'Attribute');
              AddToXml('Address_Line2' : OHSLD3 : 'Attribute');
              AddToXml('State' : OHSLST : 'Attribute');
              AddToXml('City' : OHSLCT : 'Attribute');
              AddToXml('Postal_Code' : OHSLZP : 'Attribute');
           Endif;

      *?   // Move values from FMCUST
           Chain OHCUST FMCUST;
           If %Found;
              AddToXml('Contact' : CMCOUN  : 'Attribute');
              AddToXml('Phone' : %Char(CMPHON) : 'Attribute');
           Endif;

           If PrFlag = 'PO';

      *?      // Move values from WSPOHDRPF
              AddToXml('Fax' : PHSLDFAX : 'Attribute');
              AddToXml('Email' : PHSLDEML : 'Closetag');
           Elseif PrFlag = 'CO';

      *?      // Move values from WSCOHDRPF
              AddToXml('Fax' : CHSLDFAX : 'Attribute');
              AddToXml('Email' : CHSLDEML : 'Closetag');
           Endif;

        Endsr;
      //--------------------------------------------------------------------
      *?                :-------------------:
      *?                : ShipTo Subroutine :
      *?                :-------------------:
      *
        Begsr ShipToSR;

           If PrFlag = 'PO';

      *?      // Move values into ShipTo tags from WSPOHDRPF File
              AddToXml('ShipTo' : *Blanks : 'Opentag');
              AddToXml('Contact': PHSHPCON : 'Attribute');
              AddToXml('Name' : PHSHPNAM : 'Attribute');
              AddToXml('Address_Line1' : PHSHPAD1 : 'Attribute');
              AddToXml('Address_Line2' : PHSHPAD2 : 'Attribute');
              AddToXml('State' : PHSHPSTE : 'Attribute');
              AddToXml('City' : PHSHPCTY : 'Attribute');
              AddToXml('Country ' : PHSHPCNTY : 'Attribute');
              AddToXml('Postal_Code' : PHSHPZIP : 'Attribute');
              AddToXml('Fax' : PHSHPFAX : 'Attribute');
              AddToXml('Phone' : PHSHPPHN : 'Attribute');
              AddToXml('Email' : PHSHPEML : 'Closetag');
           Elseif PrFlag = 'CO';

      *?      // Move values into ShipTo tags from WSCOHDRPF File
              AddToXml('ShipTo' : *Blanks : 'Opentag');
              AddToXml('Contact': CHSHPCON : 'Attribute');
              AddToXml('Name' : CHSHPNAM : 'Attribute');
              AddToXml('Address_Line1' : CHSHPAD1 : 'Attribute');
              AddToXml('Address_Line2' : CHSHPAD2 : 'Attribute');
              AddToXml('State' : CHSHPSTE : 'Attribute');
              AddToXml('City' : CHSHPCTY : 'Attribute');
              AddToXml('Country ' : CHSHPCNTY : 'Attribute');
              AddToXml('Postal_Code' : CHSHPZIP : 'Attribute');
              AddToXml('Fax' : CHSHPFAX : 'Attribute');
              AddToXml('Phone' : CHSHPPHN : 'Attribute');
              AddToXml('Email' : CHSHPEML : 'Closetag');
           Endif;

        Endsr;
      //--------------------------------------------------------------------
      *?                :--------------------------:
      *?                : OrderDetailSR Subroutine :
      *?                :--------------------------:
      *
        Begsr OrderDetailSR;

      *?   // Move values into Detail tags from Xml Xref Order File
           AddToXml('OrderDetails' : *Blanks : 'Starttag');

      *?   // Execute Item Part
           Exsr ItemSR;
           Exsr UnknownItemSR;
           Exsr DeletedItemSR;

           AddToXml('OrderDetails' : *Blanks : 'Endtag');

        Endsr;
      //--------------------------------------------------------------------
      *?                :-------------------:
      *?                : ItemSR Subroutine :
      *?                :-------------------:
      *
        Begsr ItemSR;

      *?   // Check Record Exists with Flag "C" and Process
      *?   // Check Order Detail to get all records that were entered manually
           Setll POrderNo FIORDRL15;
           ReadE POrderNo FIORDRL15;
           Dow Not %Eof;
              If OIITYP <> 'C';

      *?         // Accmulate quantity for manually adjusted lines
      *?         // Write XML if OILIST changes
                 If WkLine <> OILIST and WkLine <> *Blanks;
                    If PrFlag = 'PO';
                       Exsr WrtItemSR;
                    Elseif PrFlag = 'CO';
                       Exsr WrtItemSRCO;
                    Endif;
                    WkOrdQty = *Zeros;
                 Endif;

      *?         // Move order line fields to work fields
                 Exsr MoveFields;
                 Chain (OIORD#:OISEQ#) FIORDRPART;
                 If %Found;
                    WkOrdQty = WkOrdQty + ((OIQORD * HOIPCTF) / 100);
                 Else;
                    WkOrdQty = WkOrdQty + OIQORD;
                 Endif;
              Endif;
              WkLine = OILIST;
              ReadE POrderNo FIORDRL15;
           Enddo;

      *?   // Write Last read record
           If WkOIITYP = *Blanks;
              If PrFlag = 'PO';
                 Exsr WrtItemSR;
              Elseif PrFlag = 'CO';
                 Exsr WrtItemSRCO;
              Endif;
           Endif;

        Endsr;
      //--------------------------------------------------------------------
      *?                :-----------------------:
      *?                : MoveFields Subroutine :
      *?                :-----------------------:
      *
        Begsr MoveFields;

      *?   // Move the current record values to work variables
           WkOISEQ# = OISEQ#;
           If OILIST <> *Blanks;
              WkOILIST = %Int(OILIST);
           Endif;
           WkOIDTRQ = OIDTRQ;
           WkOIUUOM = OIUUOM;
           WkOIITEM = OIITEM;
           WkOISIZE = OISIZE;
           WkOIDES1 = OIDES1;
           WkOIITYP = OIITYP;

        Endsr;
      //--------------------------------------------------------------------
      *?                :----------------------:
      *?                : WrtItemSR Subroutine :
      *?                :----------------------:
      *
        Begsr WrtItemSR;

      *?   // Convert quantity to Broker Quantity
           WkOQty = *Zeros;
           Chain WkOISIZE FMSIZE;
           If %Found and SZSTAT = 'A';
              WkOQty = WkOrdQty * SZSALE;
           Else;
              WkOQty = WkOrdQty;
           Endif;

      *?   // Move values into Item tags from Xml Xref Order File
           AddToXml('Item': *Blanks : 'Opentag');
           AddToXml('KP_proc' : 'PO-WSPSTACKMC' : 'Attribute');

      *?   // Check record exists in XML File
           WkLin1 = %Int(WkLine);
           Chain (PFromOrgID:PHBRKORID:PHSEQNO:PHORDNO:WkLin1) WSPODTLL1;
           If %Found;
              If PDFLAG = 'C' Or PDFLAG = 'P';

                 AddToXml('Broker_Line_Seq' : %Char(PDBRKLNE):'Attribute');
                 AddToXml('Broker_Material' : PDBRKMAT : 'Attribute');

      *?         // Send latest comment from file FIORDRB2B1 in Ack for order/line
                 WkLICmt = *Blanks;
                 Setll (PDORDNO:PDORDLIN) FIORDRB2B1;
                 Reade (PDORDNO:PDORDLIN) FIORDRB2B1;
                 If %Equal;
                    PDKPITMCM = B2BCMNT;
                    WkLICmt   = B2BCMNT;
                 Endif;

      *?         // If comment found send, else blanks
                 AddToXml('LineItemComment' : WkLICmt : 'Attribute');
                 AddToXml('Material_Description' : PDVENDSC : 'Attribute');
                 AddToXml('Broker_Order' : PHBRKORID : 'Attribute');
                 AddToXml('Qty_Backordered' : '0' : 'Attribute');
                 WkOQty1 = PDORDQTY;
                 AddToXml('Qty_Ordered' : %Char(WkOQty1) : 'Attribute');
                 If WkOQty = *Zeros;
                    AddToXml('Qty_Confirmed' : '0' : 'Attribute');
                    AddToXml('Status' : Status_Cancel : 'Attribute');        // Qty = 0
                 Else;
                    AddToXml('Qty_Confirmed' : %Char(WkOQty) : 'Attribute');
                    AddToXml('Status' : Status_Confirm : 'Attribute');       // Qty > 0
                 Endif;
                 AddToXml('Sub_For_Broker_Line': '0' : 'Attribute');
                 AddToXml('Vendor_Line_Seq' : *Blanks : 'Attribute');
                 AddToXml('Vendor_Material' : PDVENMAT : 'Closetag');
              Endif;

      *?      // Update Flag in XML Order Detail File ("C" - Created)
              If PDFlag = 'C';
                 PDFlag = 'P';
              Endif;
              Exsr WSDtlAudit;

      *?      // Update Error Description if any in KP Line Item Comment
              Update WSPODTLR %Fields(PDFLAG:PDUPDDAT:PDUPDTIM:
                                      PDUPDUSR:PDUPDJOB:PDUPDPGM:PDKPITMCM);

      *?   // If record not found in XML Detail File
           Else;

      *?      // Call CL program to Get Error Msg
              Monitor;
                 WkMsgf  = 'WSMSGF';
                 WkDta   = *Blanks;
                 WkMsgId = 'WS00095';
                 RtvErrMsg(WkMsgID:WkMsgf:WKMSG:WkDta);
                 On-Error;
              EndMon;
              AddToXml('Broker_Line_Seq' : *Blanks :'Attribute'   );

      *?      // Read cross reference to get BrokerMaterialID for new order lines
              WkItem = (%Trim(WkOIITEM) + %Trim(WkOISIZE));
              Chain (PHFRORID : 'Customer' :WkItem) XREFINVTL1;
              If %found;
                 AddToXml('Broker_Material' : XRFORKEY : 'Attribute');
                 AddToXml('LineItemComment' : WKMSG : 'Attribute');
                 AddToXml('Material_Description' : XRDESC : 'Attribute');
              Else;
                 AddToXml('Broker_Material' : *Blanks : 'Attribute');
                 AddToXml('LineItemComment' : WKMSG : 'Attribute');
                 AddToXml('Material_Description' : *Blanks : 'Attribute');
              Endif;
              AddToXml('Broker_Order' : PHBRKORID :'Attribute');
              AddToXml('Qty_Backordered' : '0' : 'Attribute');
              AddToXml('Qty_Ordered' : *Blanks  : 'Attribute');
              If WkOQty = *Zeros;
                 AddToXml('Qty_Confirmed' : '0' : 'Attribute');
              Else;
                 AddToXml('Qty_Confirmed' : %Char(WkOQty) : 'Attribute');
              Endif;

      *?      // Check the Line Already Acknowledged
              Chain (OHORD#:WkOILIST:WkOIITEM:WkOISIZE) WSERREXPL3;
              If Not %Found;
                 Exsr WrtExpInfo;
                 AddToXml('Status' : Status_NewLine : 'Attribute');    // Qty > 0
              Else;
                 If WkOQty = *Zeros;
                    AddToXml('Status' : Status_Cancel : 'Attribute');  // Qty = 0
                 Else;
                    AddToXml('Status' : Status_Confirm : 'Attribute'); // Qty > 0
                 Endif;
              Endif;
              AddToXml('Sub_For_Broker_Line': '0' : 'Attribute');
              AddToXml('Vendor_Line_Seq' : *Blanks : 'Attribute');
              AddToXml('Vendor_Material' : XRFORKEY : 'Closetag');
           Endif;

        Endsr;
      //--------------------------------------------------------------------
      *?                :-----------------------:
      *?                : WrtExpInfo Subroutine :
      *?                :-----------------------:
      *
        Begsr WrtExpInfo;

      *?   // Clear record
           Clear WSERREXPR;

      *?   // Move Valeus into Exception file fields
           ERBRKNAM  = PFromOrgId;
           ERBRKORID = PBrokOrID;
           ERRQSPDT  = %Date(OHDTRQ:*MDY);
           ERORDNO   = OHORD#;
           ERORDLIN  = WkOILIST;
           ERITMNUM  = WkOIITEM;
           ERITMSIZ  = WkOISIZE;
           ERQTYORD  = WkOQty;
           ERRMSG    = 'Partial record added in FIORDR';
           ERFLAG    = 'I';
           ERCRTDAT  = Rundate;
           ERCRTTIM  = Runtime;
           ERCRTUSR  = User;
           ERCRTJOB  = Job;
           ERCRTPGM  = Pgm;

      *?   // Write record
           Write WSERREXPR;

        Endsr;
      //--------------------------------------------------------------------
      *?                :--------------------------:
      *?                : UnknownItemSR Subroutine :
      *?                :--------------------------:
      *
        Begsr UnknownItemSR;

      *?   // Call CL program to Get Error Msg
           Monitor;
             WkMsgf  = 'WSMSGF';
             WkDta   = *Blanks;
             WkMsgId = 'WS00049';
             RtvErrMsg(WkMsgID:WkMsgf:WKMSG:WkDta);
           On-Error;
           EndMon;

      *?   // If Create Order , Read Unknown Item Records from PO XML file
           If PrFlag = 'PO';
              Setll (PFromOrgID:PHBRKORID:PHSEQNO) WSPODTLL1;
              ReadE (PFromOrgID:PHBRKORID:PHSEQNO) WSPODTLL1;
              Dow not %Eof;
                 If PDFLAG = 'U';

      *?            // Move values for Common tags
                    AddToXml('Item': *Blanks : 'Opentag');
                    AddToXml('KP_proc' : 'PO-WSPSTACKMC' : 'Attribute');
                    AddToXml('Broker_Line_Seq' : %Char(PDBRKLNE):'Attribute');
                    AddToXml('Broker_Material' : PDBRKMAT : 'Attribute');
                    AddToXml('LineItemComment' : WKMSG : 'Attribute');
                    AddToXml('Material_Description' : PDVENDSC : 'Attribute');
                    AddToXml('Broker_Order' : PHBRKORID : 'Attribute');
                    AddToXml('Qty_Backordered' : '0' : 'Attribute');
                    WkOQty1 = PDORDQTY;
                    AddToXml('Qty_Ordered' : %Char(WkOQty1) : 'Attribute');
                    AddToXml('Qty_Confirmed' : '0' : 'Attribute');
                    AddToXml('Status' : Status_Cancel : 'Attribute');     // Item Unmapped
                    AddToXml('Sub_For_Broker_Line': '0' : 'Attribute');
                    AddToXml('Vendor_Line_Seq' : *Blanks : 'Attribute');
                    AddToXml('Vendor_Material' : PDVENMAT : 'Closetag');

      *?            // Update KP Line Item Comment in XML Order Detail File
                    PDKPITMCM = WKMSG;
                    //Update WSCODTLR %Fields(CDUPDDAT:CDUPDTIM:        WJB 8/26/19 Wrong File
                    //                CDUPDUSR:CDUPDJOB:CDUPDPGM:CDKPITMCM);
                    Update WSPODTLR %Fields(PDUPDDAT:PDUPDTIM:       // WJB 8/26/19 Corrected File
                                      PDUPDUSR:PDUPDJOB:PDUPDPGM:PDKPITMCM);
                 Endif;
                 ReadE (PFromOrgID:PHBRKORID:PHSEQNO) WSPODTLL1;
              Enddo;

      *?   // If Change Order , Read Unknown Item Records from CO XML file
           Elseif PrFlag = 'CO';
              Setll (PFromOrgID:CHBRKORID:CHSEQNO) WSCODTLL1;
              ReadE (PFromOrgID:CHBRKORID:CHSEQNO) WSCODTLL1;
              Dow not %Eof;
                 If CDFLAG = 'U';

      *?            // Move values from Xml Order File
                    AddToXml('Item': *Blanks : 'Opentag');
                    AddToXml('KP_proc' : 'CO-WSPSTACKMC' : 'Attribute');
                    AddToXml('Broker_Line_Seq' : %Char(CDBRKLNE):'Attribute');
                    AddToXml('Broker_Material' : CDBRKMAT : 'Attribute');
                    AddToXml('LineItemComment' : WKMSG : 'Attribute');
                    AddToXml('Material_Description' : CDVENDSC : 'Attribute');
                    AddToXml('Broker_Order' : CHBRKORID : 'Attribute');
                    AddToXml('Qty_Backordered' : '0' : 'Attribute');
                    WkOQty1 = CDORDQTY;
                    AddToXml('Qty_Ordered' : %Char(WkOQty1) : 'Attribute');
                    AddToXml('Qty_Confirmed' : '0' : 'Attribute');
                    AddToXml('Status' : Status_Cancel : 'Attribute');      // Item Unmapped
                    AddToXml('Sub_For_Broker_Line': '0' : 'Attribute');
                    AddToXml('Vendor_Line_Seq' : *Blanks : 'Attribute');
                    AddToXml('Vendor_Material' : CDVENMAT : 'Closetag');

      *?            // Update KP Line Item Comment in XML Order Detail File
                    CDKPITMCM = WKMSG;
                    Update WSCODTLR %Fields(CDUPDDAT:CDUPDTIM:
                                      CDUPDUSR:CDUPDJOB:CDUPDPGM:CDKPITMCM);
                 Endif;
                 ReadE (PFromOrgID:CHBRKORID:CHSEQNO) WSCODTLL1;
              Enddo;
           Endif;

        Endsr;
      //--------------------------------------------------------------------
      *?                :--------------------------:
      *?                : DeletedItemSR Subroutine :
      *?                :--------------------------:
      *
        Begsr DeletedItemSR;

      *?   // Call CL program to Get Error Msg
           Monitor;
             WkMsgf  = 'WSMSGF';
             WkDta   = *Blanks;
             WkMsgId = 'WS00088';
             RtvErrMsg(WkMsgID:WkMsgf:WKMSG:WkDta);
           On-Error;
           EndMon;

      *?   // If Create Order , Read all Item Records from PO XML file
           If PrFlag = 'PO';
              Setll (PFromOrgID:PHBRKORID:PHSEQNO) WSPODTLL1;
              ReadE (PFromOrgID:PHBRKORID:PHSEQNO) WSPODTLL1;
              Dow not %Eof;

      *?         // Do not check for unmapped Items again
                 If PDFLAG <> 'U';

      *?           // Check if line is deleted in FIORDR
      *?           // but found in XML file with OILIST
                   WkLine = *Blanks;
                   WkLine = %Char(PDORDLIN);
                   Chain (PDORDNO:WkLine) FIORDRL15;
                   If Not %Found();

      *?              // Move values for Common tags
                      AddToXml('Item': *Blanks : 'Opentag');
                      AddToXml('KP_proc' : 'PO-WSPSTACKMC' : 'Attribute');
                      AddToXml('Broker_Line_Seq' : %Char(PDBRKLNE):'Attribute');
                      AddToXml('Broker_Material' : PDBRKMAT : 'Attribute');
                      AddToXml('Material_Description' : PDVENDSC : 'Attribute');
                      AddToXml('Broker_Order' : PHBRKORID : 'Attribute');
                      AddToXml('Qty_Backordered' : '0' : 'Attribute');
                      WkOQty1 = PDORDQTY;
                      AddToXml('Qty_Ordered' : %Char(WkOQty1) : 'Attribute');
                      AddToXml('Qty_Confirmed' : '0' : 'Attribute');
                      AddToXml('Status' : Status_Cancel : 'Attribute');        // Deleted Item
                      AddToXml('Sub_For_Broker_Line': '0' : 'Attribute');
                      AddToXml('Vendor_Line_Seq' : *Blanks : 'Attribute');

      *?              // Write message to FIORDRB2B1 file
                      B2BORD# = PDORDNO;
                      B2BSEQ# = PDORDLIN;
                      B2BCMNT = WKMSG;
                      B2BTIME = %Timestamp();
                      B2BUSER = PDUPDUSR;
                      Write RIORDRB2BC;

      *?              // Send latest comment from file FIORDRB2B1 in Ack for order/line
                      WkLICmt = *Blanks;
                      Setll (PDORDNO:PDORDLIN) FIORDRB2B1;
                      Reade (PDORDNO:PDORDLIN) FIORDRB2B1;
                      If %Found;
                         PDKPITMCM = B2BCMNT;
                         WkLICmt   = B2BCMNT;
                      Endif;
                      AddToXml('LineItemComment' : WkLICmt : 'Attribute');
                      AddToXml('Vendor_Material' : PDVENMAT : 'Closetag');
                      Update WSPODTLR %Fields(PDUPDDAT:PDUPDTIM:
                                         PDUPDUSR:PDUPDJOB:PDUPDPGM:PDKPITMCM);
                   Endif;
                 Endif;
                ReadE (PFromOrgID:PHBRKORID:PHSEQNO) WSPODTLL1;
              Enddo;

      *?   // If Change Order , Read all Item Records from CO XML file
           Elseif PrFlag = 'CO';
              Setll (PFromOrgID:CHBRKORID:CHSEQNO) WSCODTLL1;
              ReadE (PFromOrgID:CHBRKORID:CHSEQNO) WSCODTLL1;
              Dow not %Eof;

      *?        // Do not check for unmapped Items again
                If CDFLAG <> 'U';

      *?           // Check if line is deleted in FIORDR
      *?           // but found in XML file with OILIST
                   WkLine = *Blanks;
                   WkLine = %Char(CDORDLIN);
                   Chain (CDORDNO:WkLine) FIORDRL15;
                   If Not %Found();

      *?              // Move values from Xml Order File
                      AddToXml('Item': *Blanks : 'Opentag');
                      AddToXml('KP_proc' : 'CO-WSPSTACKMC' : 'Attribute');
                      AddToXml('Broker_Line_Seq' : %Char(CDBRKLNE):'Attribute');
                      AddToXml('Broker_Material' : CDBRKMAT : 'Attribute');
                      AddToXml('Material_Description' : CDVENDSC : 'Attribute');
                      AddToXml('Broker_Order' : CHBRKORID : 'Attribute');
                      AddToXml('Qty_Backordered' : '0' : 'Attribute');
                      WkOQty1 = CDORDQTY;
                      AddToXml('Qty_Ordered' : %Char(WkOQty1) : 'Attribute');
                      AddToXml('Qty_Confirmed' : '0' : 'Attribute');
                      AddToXml('Status' : Status_Cancel : 'Attribute');       // Deleted Item
                      AddToXml('Sub_For_Broker_Line': '0' : 'Attribute');
                      AddToXml('Vendor_Line_Seq' : *Blanks : 'Attribute');

      *?              // Write message to FIORDRB2B1 file
                      B2BORD# = CDORDNO;
                      B2BSEQ# = CDORDLIN;
                      B2BCMNT = WKMSG;
                      B2BTIME = %Timestamp();
                      B2BUSER = CDUPDUSR;
                      Write RIORDRB2BC;

      *?              // Send latest comment from file FIORDRB2B1 in Ack for order/line
                      WkLICmt = *Blanks;
                      Setll (CDORDNO:CDORDLIN) FIORDRB2B1;
                      Reade (CDORDNO:CDORDLIN) FIORDRB2B1;
                      If %Found;
                         CDKPITMCM = B2BCMNT;
                         WkLICmt   = B2BCMNT;
                      Endif;
                      AddToXml('LineItemComment' : WkLICmt : 'Attribute');
                      AddToXml('Vendor_Material' : CDVENMAT : 'Closetag');
                      Update WSCODTLR %Fields(CDUPDDAT:CDUPDTIM:
                                         CDUPDUSR:CDUPDJOB:CDUPDPGM:CDKPITMCM);
                   Endif;
                Endif;
                ReadE (PFromOrgID:CHBRKORID:CHSEQNO) WSCODTLL1;
              Enddo;
           Endif;

        Endsr;
      //--------------------------------------------------------------------
      *?                :------------------------:
      *?                : WrtItemSRCO Subroutine :
      *?                :------------------------:
      *
        Begsr WrtItemSRCO;

      *?   // Convert quantity to Broker Quantity
           WkOQty = *Zeros;
           Chain WkOISIZE FMSIZE;
           If %Found and SZSTAT = 'A';
              WkOQty = WkOrdQty * SZSALE;
           Else;
              WkOQty = WkOrdQty;
           Endif;

      *?   // Move values from XML file
           AddToXml('Item': *Blanks : 'Opentag');
           AddToXml('KP_proc' : 'CO-WSPSTACKMC' : 'Attribute');

           WkLin1 = %Int(WkLine);
           Chain (PFromOrgID:CHBRKORID:CHSEQNO:CHORDNO:WkLin1) WSCODTLL1;
           If %Found;
              If CDFLAG = 'C' Or CDFLAG= 'P';

      *?         // Move values from Xml File
                 AddToXml('Broker_Line_Seq' : %Char(CDBRKLNE):'Attribute');
                 AddToXml('Broker_Material' : CDBRKMAT : 'Attribute');

      *?         // Send latest comment from file FIORDRB2B1 in Ack for order/line
                 WkLICmt = *Blanks;
                 Setll (CDORDNO:CDORDLIN) FIORDRB2B1;
                 Reade (CDORDNO:CDORDLIN) FIORDRB2B1;
                 If %Equal;
                    CDKPITMCM = B2BCMNT;
                    WkLICmt   = B2BCMNT;
                 Endif;

      *?         // If comment found send, else blanks
                 AddToXml('LineItemComment' : WkLICmt : 'Attribute');
                 AddToXml('Material_Description' : CDVENDSC : 'Attribute');
                 AddToXml('Broker_Order' : CHBRKORID : 'Attribute');
                 AddToXml('Qty_Backordered' : '0' : 'Attribute');

                 If CDORDQTY = *Zeros;
                    AddToXml('Qty_Ordered' : '0' : 'Attribute');
                    AddToXml('Qty_Confirmed' : '0' : 'Attribute');
                    AddToXml('Status' : Status_Cancel : 'Attribute');      // Qty = 0
                 Else;
                    WkOQty1 = CDORDQTY;
                    AddToXml('Qty_Ordered' : %Char(WkOQty1) : 'Attribute');
                    If WkOQty = *Zeros;
                       AddToXml('Qty_Confirmed' : '0' : 'Attribute');
                       AddToXml('Status' : Status_Cancel : 'Attribute');   // Qty = 0
                    Else;
                       AddToXml('Qty_Confirmed' : %Char(WkOQty) : 'Attribute');
                       AddToXml('Status' : Status_Confirm : 'Attribute');  // Qty > 0
                    Endif;
                 Endif;

                 AddToXml('Sub_For_Broker_Line': '0' : 'Attribute');
                 AddToXml('Vendor_Line_Seq' : *Blanks : 'Attribute');
                 AddToXml('Vendor_Material' : CDVENMAT : 'Closetag');

      *?         // Update Flag in XML Order Detail File ("C" - Created)
                 If CDFlag = 'C';
                    CDFlag = 'P';
                 Endif;
                 Exsr WSDtlAuditCo;

      *?         // Update Error Description if any in KP Line Item Comment
                 Update WSCODTLR %Fields(CDFLAG:CDUPDDAT:CDUPDTIM:
                                      CDUPDUSR:CDUPDJOB:CDUPDPGM:CDKPITMCM);
              Endif;

      *?   // If record not found in XML Detail File
           Else;

      *?      // Call CL program to Get Error Msg
              Monitor;
                 WkMsgf  = 'WSMSGF';
                 WkDta   = *Blanks;
                 WkMsgId = 'WS00095';
                 RtvErrMsg(WkMsgID:WkMsgf:WKMSG:WkDta);
                 On-Error;
              EndMon;

              AddToXml('Broker_Line_Seq' : *Blanks :'Attribute');

      *?      // XREF to get Broker Material Id for new order lines
              WkItem = (%Trim(WkOIITEM) + %Trim(WkOISIZE));
              Chain (CHFRORID : 'Customer' :WkItem) XREFINVTL1;
              If %found;
                 AddToXml('Broker_Material' : XRFORKEY : 'Attribute');
                 AddToXml('LineItemComment' : WKMSG : 'Attribute');
                 AddToXml('Material_Description' : XRDESC : 'Attribute');
              Else;
                 AddToXml('Broker_Material' : *Blanks : 'Attribute');
                 AddToXml('LineItemComment' : WKMSG : 'Attribute');
                 AddToXml('Material_Description' : *Blanks : 'Attribute');
              Endif;
              AddToXml('Broker_Order' : CHBRKORID : 'Attribute');
              AddToXml('Qty_Backordered' : '0' : 'Attribute');
              AddToXml('Qty_Ordered' : *Blanks : 'Attribute');
              If WkOQty = *Zeros;
                 AddToXml('Qty_Confirmed' : '0' : 'Attribute');
              Else;
                 AddToXml('Qty_Confirmed' : %Char(WkOQty) : 'Attribute');
              Endif;

      *?      // Check the Line Already Acknowledged
              Chain (OHORD#:WkOILIST:WkOIITEM:WkOISIZE) WSERREXPL3;
              If Not %Found;
                 Exsr WrtExpInfo;
                 AddToXml('Status' : Status_NewLine : 'Attribute');     // Qty > 0
              Else;
                 If WkOQty = *Zeros;
                    AddToXml('Status' : Status_Cancel : 'Attribute');   // Qty = 0
                 Else;
                    AddToXml('Status' : Status_Confirm : 'Attribute');  // Qty > 0
                 Endif;
              Endif;
              AddToXml('Sub_For_Broker_Line': '0' : 'Attribute');
              AddToXml('Vendor_Line_Seq' : *Blanks : 'Attribute');
              AddToXml('Vendor_Material' : XRFORKEY : 'Closetag');
           Endif;

        Endsr;
      //--------------------------------------------------------------------
      *?                :--------------------------:
      *?                : CheckItemAuth Subroutine :
      *?                :--------------------------:
      *
      *?Logic : Check Item Authorization for Item and Broker
      *?
        Begsr CheckItemAuth;

      *?   // Check Item Authorization for Item and Broker
           If PrFlag = 'PO';
              If PHFRORID = 'Ball Seed';
                 ThisType = 'Ball Seed';
              Else;
                 ThisType = 'WEB';
              Endif;
              RqToday = PHRQSHDT;                         // Today MDY
           Elseif PrFlag = 'CO';
              If CHFRORID = 'Ball Seed';
                 ThisType = 'Ball Seed';
              Else;
                 ThisType = 'WEB';
              Endif;
              RqToday = CHRQSHDT;                         // Today MDY
           Endif;

      *?   // Call Inventory Availability Status Program
           Error   = *Zeros;
           ErrDesc = *Blanks;
           If WkOQty = 0;
              INVAVLSTS(WkOIITEM:WkOISIZE:RqToday:
                        ThisType:Error:ErrDesc);
           Endif;

        Endsr;
      //--------------------------------------------------------------------
      *?            :-----------------------:
      *?            : WSHdrAudit Subroutine :
      *?            :-----------------------:
      *
      *?Logic : Move values into Audit Fields (WSPOHDRPF)
      *?
        Begsr WSHdrAudit;

      *?   // Audit Stamp
           PHUPDDAT = Rundate;
           PHUPDTIM = Runtime;
           PHUPDUSR = User;
           PHUPDJOB = Job;
           PHUPDPGM = Pgm;

        Endsr;
      //--------------------------------------------------------------------
      *?            :-----------------------:
      *?            : WSDtlAudit Subroutine :
      *?            :-----------------------:
      *
      *?Logic : Move values into Audit Fields (WSPODTLPF)
      *?
        Begsr WSDtlAudit;

      *?   // Audit Stamp
           PDUPDDAT = Rundate;
           PDUPDTIM = Runtime;
           PDUPDUSR = User;
           PDUPDJOB = Job;
           PDUPDPGM = Pgm;

        Endsr;
      //--------------------------------------------------------------------
      *?            :-------------------------:
      *?            : WSHdrAuditCO Subroutine :
      *?            :-------------------------:
      *
      *?Logic : Move values into Audit Fields (WSCOHDRPF)
      *?
        Begsr WSHdrAuditCO;

      *?   // Audit Stamp
           CHUPDDAT = Rundate;
           CHUPDTIM = Runtime;
           CHUPDUSR = User;
           CHUPDJOB = Job;
           CHUPDPGM = Pgm;

        Endsr;
      //--------------------------------------------------------------------
      *?            :-------------------------:
      *?            : WSDtlAuditCO Subroutine :
      *?            :-------------------------:
      *
      *?Logic : Move values into Audit Fields (WSCODTLPF)
      *?
        Begsr WSDtlAuditCO;

      *?   // Audit Stamp
           CDUPDDAT = Rundate;
           CDUPDTIM = Runtime;
           CDUPDUSR = User;
           CDUPDJOB = Job;
           CDUPDPGM = Pgm;

        Endsr;
      //--------------------------------------------------------------------
      *?                :------------------:
      *?                : Status Procedure :
      *?                :------------------:
      *
        Dcl-Proc  Status;
           Dcl-Pi Status Char(4);
             WkBroker  Char(20) Value;
             StatusType  Char(30) Value;
           End-Pi;

      *?   // Get Status from FBROKDFT file based on Quantity
           WkStatus = *Blanks;
           Chain (WkBroker : StatusType) FBrokDftL0;
           If %Found;
              WkStatus = %Trim(DFVARVAL);
           Endif;
           Return WkStatus;

        End-Proc;
      //--------------------------------------------------------------------
      *?                :--------------------:
      *?                : AddToXml Procedure :
      *?                :--------------------:
      *
      *?Logic   : AddToXml to generate XML Acknowledgement
      *?          Field by field process
      *?Example : Starttag : <Tagname>
      *?          Opentag  : <Tagname
      *?          Closetag :  Tagname/>
      *?          Close    :  Tagname>
      *?          Endtag   : </Tagname>
      *
        Dcl-Proc  AddToXml;
           Dcl-Pi AddToXml;
              Tagname      Char(50)  Value;
              Tagvalue     Char(300) Value;
              Info         Char(10)  Value;
           End-Pi;

      *?   // Replace Special Characters
           If TagValue <> *Blanks;
              TagValue = %ScanRpl('&': '&amp;': TagValue);
              TagValue = %ScanRpl('''': '&apos;' : TagValue);
              TagValue = %ScanRpl('"': '&quot;' : TagValue);
           Endif;

      *?   // Check Info to add XML tag
           Select;

              When Info = 'Starttag';
                 Xml = %Trimr(Xml) + '<' + %Trim(Tagname)
                                 + %Trim(Tagvalue)  + '>';

              When Info = 'Opentag';
                 Xml = %Trimr(Xml) + ' ' + '<' + %Trim(Tagname) ;

              When Info = 'Attribute';
                 Xml = %Trimr(Xml) + ' ' + %Trim(Tagname) + '="'
                                 + %Trim(Tagvalue) + '" ';

              When Info = 'Closetag';
                 Xml = %Trimr(Xml) + ' ' + %Trim(Tagname) + '="'
                                   + %Trim(Tagvalue) + '"' + ' />';

              When Info = 'Close';
                  Xml = %Trimr(Xml) + ' ' + %Trim(Tagname) + '="'
                                   + %Trim(Tagvalue) + '"' + ' >';

              When Info = 'Endtag';
                  Xml = %Trimr(Xml) + ' </' + %Trim(Tagname) + '>';

           Endsl;

      *?   // Write XML Line into IFS
           Exsr WriteIFS;
      *
      //--------------------------------------------------------------------
      *?            :---------------------:
      *?            : WriteIFS Subroutine :
      *?            :---------------------:
      *
      *?Logic : Write Each tag as a Record into Flat File
      *?
        Begsr WriteIFS;

      *?   // Check Info to add XML tag
           Select;

              When Info = 'Starttag';
                 XmlIfs =  '<' + %Trim(Tagname)
                                 + %Trim(Tagvalue)  + '>';

              When Info = 'Opentag';
                 XmlIfs =  '<' + %Trim(Tagname) ;

              When Info = 'Attribute';
                 XmlIfs =  %Trim(Tagname) + '="'
                                 + %Trim(Tagvalue) + '" ';

              When Info = 'Closetag';
                 XmlIfs =  %Trim(Tagname) + '="'
                                   + %Trim(Tagvalue) + '"' + ' />';

              When Info = 'Close';
                 XmlIfs =  %Trim(Tagname) + '="'
                                   + %Trim(Tagvalue) + '"' + ' >';

              When Info = 'Endtag';
                 XmlIfs = ' </' + %Trim(Tagname) + '>';

           Endsl;

      *?   // Insert into Flat File
           Exec Sql
           INSERT INTO IFSXML Values(Trim(:XMLIFS));

        Endsr;

        End-Proc;
      *?------------- End of Program ----------------------------------
